var docstrings = {
    "abs": "Return&nbsp;the&nbsp;absolute&nbsp;value&nbsp;of&nbsp;the&nbsp;argument.",
    "all": "Return&nbsp;True&nbsp;if&nbsp;bool(x)&nbsp;is&nbsp;True&nbsp;for&nbsp;all&nbsp;values&nbsp;x&nbsp;in&nbsp;the&nbsp;iterable.<br>\n<br>\nIf&nbsp;the&nbsp;iterable&nbsp;is&nbsp;empty,&nbsp;return&nbsp;True.",
    "any": "Return&nbsp;True&nbsp;if&nbsp;bool(x)&nbsp;is&nbsp;True&nbsp;for&nbsp;any&nbsp;x&nbsp;in&nbsp;the&nbsp;iterable.<br>\n<br>\nIf&nbsp;the&nbsp;iterable&nbsp;is&nbsp;empty,&nbsp;return&nbsp;False.",
    "ascii": "Return&nbsp;an&nbsp;ASCII-only&nbsp;representation&nbsp;of&nbsp;an&nbsp;object.<br>\n<br>\nAs&nbsp;repr(),&nbsp;return&nbsp;a&nbsp;string&nbsp;containing&nbsp;a&nbsp;printable&nbsp;representation&nbsp;of&nbsp;an<br>\nobject,&nbsp;but&nbsp;escape&nbsp;the&nbsp;non-ASCII&nbsp;characters&nbsp;in&nbsp;the&nbsp;string&nbsp;returned&nbsp;by<br>\nrepr()&nbsp;using&nbsp;&#92;&#92;x,&nbsp;&#92;&#92;u&nbsp;or&nbsp;&#92;&#92;U&nbsp;escapes.&nbsp;This&nbsp;generates&nbsp;a&nbsp;string&nbsp;similar<br>\nto&nbsp;that&nbsp;returned&nbsp;by&nbsp;repr()&nbsp;in&nbsp;Python&nbsp;2.",
    "bin": "Return&nbsp;the&nbsp;binary&nbsp;representation&nbsp;of&nbsp;an&nbsp;integer.<br>\n<br>\n&nbsp;&nbsp;&nbsp;&gt;&gt;&gt;&nbsp;bin(2796202)<br>\n&nbsp;&nbsp;&nbsp;'0b1010101010101010101010'",
    "bool": "bool(x)&nbsp;-&gt;&nbsp;bool<br>\n<br>\nReturns&nbsp;True&nbsp;when&nbsp;the&nbsp;argument&nbsp;x&nbsp;is&nbsp;true,&nbsp;False&nbsp;otherwise.<br>\nThe&nbsp;builtins&nbsp;True&nbsp;and&nbsp;False&nbsp;are&nbsp;the&nbsp;only&nbsp;two&nbsp;instances&nbsp;of&nbsp;the&nbsp;class&nbsp;bool.<br>\nThe&nbsp;class&nbsp;bool&nbsp;is&nbsp;a&nbsp;subclass&nbsp;of&nbsp;the&nbsp;class&nbsp;int,&nbsp;and&nbsp;cannot&nbsp;be&nbsp;subclassed.",
    "bytearray": "bytearray(iterable_of_ints)&nbsp;-&gt;&nbsp;bytearray<br>\nbytearray(string,&nbsp;encoding[,&nbsp;errors])&nbsp;-&gt;&nbsp;bytearray<br>\nbytearray(bytes_or_buffer)&nbsp;-&gt;&nbsp;mutable&nbsp;copy&nbsp;of&nbsp;bytes_or_buffer<br>\nbytearray(int)&nbsp;-&gt;&nbsp;bytes&nbsp;array&nbsp;of&nbsp;size&nbsp;given&nbsp;by&nbsp;the&nbsp;parameter&nbsp;initialized&nbsp;with&nbsp;null&nbsp;bytes<br>\nbytearray()&nbsp;-&gt;&nbsp;empty&nbsp;bytes&nbsp;array<br>\n<br>\nConstruct&nbsp;a&nbsp;mutable&nbsp;bytearray&nbsp;object&nbsp;from:<br>\n&nbsp;&nbsp;-&nbsp;an&nbsp;iterable&nbsp;yielding&nbsp;integers&nbsp;in&nbsp;range(256)<br>\n&nbsp;&nbsp;-&nbsp;a&nbsp;text&nbsp;string&nbsp;encoded&nbsp;using&nbsp;the&nbsp;specified&nbsp;encoding<br>\n&nbsp;&nbsp;-&nbsp;a&nbsp;bytes&nbsp;or&nbsp;a&nbsp;buffer&nbsp;object<br>\n&nbsp;&nbsp;-&nbsp;any&nbsp;object&nbsp;implementing&nbsp;the&nbsp;buffer&nbsp;API.<br>\n&nbsp;&nbsp;-&nbsp;an&nbsp;integer",
    "bytes": "bytes(iterable_of_ints)&nbsp;-&gt;&nbsp;bytes<br>\nbytes(string,&nbsp;encoding[,&nbsp;errors])&nbsp;-&gt;&nbsp;bytes<br>\nbytes(bytes_or_buffer)&nbsp;-&gt;&nbsp;immutable&nbsp;copy&nbsp;of&nbsp;bytes_or_buffer<br>\nbytes(int)&nbsp;-&gt;&nbsp;bytes&nbsp;object&nbsp;of&nbsp;size&nbsp;given&nbsp;by&nbsp;the&nbsp;parameter&nbsp;initialized&nbsp;with&nbsp;null&nbsp;bytes<br>\nbytes()&nbsp;-&gt;&nbsp;empty&nbsp;bytes&nbsp;object<br>\n<br>\nConstruct&nbsp;an&nbsp;immutable&nbsp;array&nbsp;of&nbsp;bytes&nbsp;from:<br>\n&nbsp;&nbsp;-&nbsp;an&nbsp;iterable&nbsp;yielding&nbsp;integers&nbsp;in&nbsp;range(256)<br>\n&nbsp;&nbsp;-&nbsp;a&nbsp;text&nbsp;string&nbsp;encoded&nbsp;using&nbsp;the&nbsp;specified&nbsp;encoding<br>\n&nbsp;&nbsp;-&nbsp;any&nbsp;object&nbsp;implementing&nbsp;the&nbsp;buffer&nbsp;API.<br>\n&nbsp;&nbsp;-&nbsp;an&nbsp;integer",
    "callable": "Return&nbsp;whether&nbsp;the&nbsp;object&nbsp;is&nbsp;callable&nbsp;(i.e.,&nbsp;some&nbsp;kind&nbsp;of&nbsp;function).<br>\n<br>\nNote&nbsp;that&nbsp;classes&nbsp;are&nbsp;callable,&nbsp;as&nbsp;are&nbsp;instances&nbsp;of&nbsp;classes&nbsp;with&nbsp;a<br>\n__call__()&nbsp;method.",
    "chr": "Return&nbsp;a&nbsp;Unicode&nbsp;string&nbsp;of&nbsp;one&nbsp;character&nbsp;with&nbsp;ordinal&nbsp;i;&nbsp;0&nbsp;&lt;=&nbsp;i&nbsp;&lt;=&nbsp;0x10ffff.",
    "classmethod": "classmethod(function)&nbsp;-&gt;&nbsp;method<br>\n<br>\nConvert&nbsp;a&nbsp;function&nbsp;to&nbsp;be&nbsp;a&nbsp;class&nbsp;method.<br>\n<br>\nA&nbsp;class&nbsp;method&nbsp;receives&nbsp;the&nbsp;class&nbsp;as&nbsp;implicit&nbsp;first&nbsp;argument,<br>\njust&nbsp;like&nbsp;an&nbsp;instance&nbsp;method&nbsp;receives&nbsp;the&nbsp;instance.<br>\nTo&nbsp;declare&nbsp;a&nbsp;class&nbsp;method,&nbsp;use&nbsp;this&nbsp;idiom:<br>\n<br>\n&nbsp;&nbsp;class&nbsp;C:<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@classmethod<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;f(cls,&nbsp;arg1,&nbsp;arg2,&nbsp;...):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>\n<br>\nIt&nbsp;can&nbsp;be&nbsp;called&nbsp;either&nbsp;on&nbsp;the&nbsp;class&nbsp;(e.g.&nbsp;C.f())&nbsp;or&nbsp;on&nbsp;an&nbsp;instance<br>\n(e.g.&nbsp;C().f()).&nbsp;&nbsp;The&nbsp;instance&nbsp;is&nbsp;ignored&nbsp;except&nbsp;for&nbsp;its&nbsp;class.<br>\nIf&nbsp;a&nbsp;class&nbsp;method&nbsp;is&nbsp;called&nbsp;for&nbsp;a&nbsp;derived&nbsp;class,&nbsp;the&nbsp;derived&nbsp;class<br>\nobject&nbsp;is&nbsp;passed&nbsp;as&nbsp;the&nbsp;implied&nbsp;first&nbsp;argument.<br>\n<br>\nClass&nbsp;methods&nbsp;are&nbsp;different&nbsp;than&nbsp;C++&nbsp;or&nbsp;Java&nbsp;static&nbsp;methods.<br>\nIf&nbsp;you&nbsp;want&nbsp;those,&nbsp;see&nbsp;the&nbsp;staticmethod&nbsp;builtin.",
    "complex": "Create&nbsp;a&nbsp;complex&nbsp;number&nbsp;from&nbsp;a&nbsp;real&nbsp;part&nbsp;and&nbsp;an&nbsp;optional&nbsp;imaginary&nbsp;part.<br>\n<br>\nThis&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;(real&nbsp;+&nbsp;imag*1j)&nbsp;where&nbsp;imag&nbsp;defaults&nbsp;to&nbsp;0.",
    "delattr": "Deletes&nbsp;the&nbsp;named&nbsp;attribute&nbsp;from&nbsp;the&nbsp;given&nbsp;object.<br>\n<br>\ndelattr(x,&nbsp;'y')&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;``del&nbsp;x.y''",
    "dict": "dict()&nbsp;-&gt;&nbsp;new&nbsp;empty&nbsp;dictionary<br>\ndict(mapping)&nbsp;-&gt;&nbsp;new&nbsp;dictionary&nbsp;initialized&nbsp;from&nbsp;a&nbsp;mapping&nbsp;object's<br>\n&nbsp;&nbsp;&nbsp;&nbsp;(key,&nbsp;value)&nbsp;pairs<br>\ndict(iterable)&nbsp;-&gt;&nbsp;new&nbsp;dictionary&nbsp;initialized&nbsp;as&nbsp;if&nbsp;via:<br>\n&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;{}<br>\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;k,&nbsp;v&nbsp;in&nbsp;iterable:<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d[k]&nbsp;=&nbsp;v<br>\ndict(**kwargs)&nbsp;-&gt;&nbsp;new&nbsp;dictionary&nbsp;initialized&nbsp;with&nbsp;the&nbsp;name=value&nbsp;pairs<br>\n&nbsp;&nbsp;&nbsp;&nbsp;in&nbsp;the&nbsp;keyword&nbsp;argument&nbsp;list.&nbsp;&nbsp;For&nbsp;example:&nbsp;&nbsp;dict(one=1,&nbsp;two=2)",
    "dir": "dir([object])&nbsp;-&gt;&nbsp;list&nbsp;of&nbsp;strings<br>\n<br>\nIf&nbsp;called&nbsp;without&nbsp;an&nbsp;argument,&nbsp;return&nbsp;the&nbsp;names&nbsp;in&nbsp;the&nbsp;current&nbsp;scope.<br>\nElse,&nbsp;return&nbsp;an&nbsp;alphabetized&nbsp;list&nbsp;of&nbsp;names&nbsp;comprising&nbsp;(some&nbsp;of)&nbsp;the&nbsp;attributes<br>\nof&nbsp;the&nbsp;given&nbsp;object,&nbsp;and&nbsp;of&nbsp;attributes&nbsp;reachable&nbsp;from&nbsp;it.<br>\nIf&nbsp;the&nbsp;object&nbsp;supplies&nbsp;a&nbsp;method&nbsp;named&nbsp;__dir__,&nbsp;it&nbsp;will&nbsp;be&nbsp;used;&nbsp;otherwise<br>\nthe&nbsp;default&nbsp;dir()&nbsp;logic&nbsp;is&nbsp;used&nbsp;and&nbsp;returns:<br>\n&nbsp;&nbsp;for&nbsp;a&nbsp;module&nbsp;object:&nbsp;the&nbsp;module's&nbsp;attributes.<br>\n&nbsp;&nbsp;for&nbsp;a&nbsp;class&nbsp;object:&nbsp;&nbsp;its&nbsp;attributes,&nbsp;and&nbsp;recursively&nbsp;the&nbsp;attributes<br>\n&nbsp;&nbsp;&nbsp;&nbsp;of&nbsp;its&nbsp;bases.<br>\n&nbsp;&nbsp;for&nbsp;any&nbsp;other&nbsp;object:&nbsp;its&nbsp;attributes,&nbsp;its&nbsp;class's&nbsp;attributes,&nbsp;and<br>\n&nbsp;&nbsp;&nbsp;&nbsp;recursively&nbsp;the&nbsp;attributes&nbsp;of&nbsp;its&nbsp;class's&nbsp;base&nbsp;classes.",
    "divmod": "Return&nbsp;the&nbsp;tuple&nbsp;(x//y,&nbsp;x%y).&nbsp;&nbsp;Invariant:&nbsp;div*y&nbsp;+&nbsp;mod&nbsp;==&nbsp;x.",
    "enumerate": "Return&nbsp;an&nbsp;enumerate&nbsp;object.<br>\n<br>\n&nbsp;&nbsp;iterable<br>\n&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;object&nbsp;supporting&nbsp;iteration<br>\n<br>\nThe&nbsp;enumerate&nbsp;object&nbsp;yields&nbsp;pairs&nbsp;containing&nbsp;a&nbsp;count&nbsp;(from&nbsp;start,&nbsp;which<br>\ndefaults&nbsp;to&nbsp;zero)&nbsp;and&nbsp;a&nbsp;value&nbsp;yielded&nbsp;by&nbsp;the&nbsp;iterable&nbsp;argument.<br>\n<br>\nenumerate&nbsp;is&nbsp;useful&nbsp;for&nbsp;obtaining&nbsp;an&nbsp;indexed&nbsp;list:<br>\n&nbsp;&nbsp;&nbsp;&nbsp;(0,&nbsp;seq[0]),&nbsp;(1,&nbsp;seq[1]),&nbsp;(2,&nbsp;seq[2]),&nbsp;...",
    "eval": "Evaluate&nbsp;the&nbsp;given&nbsp;source&nbsp;in&nbsp;the&nbsp;context&nbsp;of&nbsp;globals&nbsp;and&nbsp;locals.<br>\n<br>\nThe&nbsp;source&nbsp;may&nbsp;be&nbsp;a&nbsp;string&nbsp;representing&nbsp;a&nbsp;Python&nbsp;expression<br>\nor&nbsp;a&nbsp;code&nbsp;object&nbsp;as&nbsp;returned&nbsp;by&nbsp;compile().<br>\nThe&nbsp;globals&nbsp;must&nbsp;be&nbsp;a&nbsp;dictionary&nbsp;and&nbsp;locals&nbsp;can&nbsp;be&nbsp;any&nbsp;mapping,<br>\ndefaulting&nbsp;to&nbsp;the&nbsp;current&nbsp;globals&nbsp;and&nbsp;locals.<br>\nIf&nbsp;only&nbsp;globals&nbsp;is&nbsp;given,&nbsp;locals&nbsp;defaults&nbsp;to&nbsp;it.",
    "filter": "filter(function&nbsp;or&nbsp;None,&nbsp;iterable)&nbsp;--&gt;&nbsp;filter&nbsp;object<br>\n<br>\nReturn&nbsp;an&nbsp;iterator&nbsp;yielding&nbsp;those&nbsp;items&nbsp;of&nbsp;iterable&nbsp;for&nbsp;which&nbsp;function(item)<br>\nis&nbsp;true.&nbsp;If&nbsp;function&nbsp;is&nbsp;None,&nbsp;return&nbsp;the&nbsp;items&nbsp;that&nbsp;are&nbsp;true.",
    "float": "Convert&nbsp;a&nbsp;string&nbsp;or&nbsp;number&nbsp;to&nbsp;a&nbsp;floating&nbsp;point&nbsp;number,&nbsp;if&nbsp;possible.",
    "format": "Return&nbsp;value.__format__(format_spec)<br>\n<br>\nformat_spec&nbsp;defaults&nbsp;to&nbsp;the&nbsp;empty&nbsp;string.<br>\nSee&nbsp;the&nbsp;Format&nbsp;Specification&nbsp;Mini-Language&nbsp;section&nbsp;of&nbsp;help('FORMATTING')&nbsp;for<br>\ndetails.",
    "frozenset": "frozenset()&nbsp;-&gt;&nbsp;empty&nbsp;frozenset&nbsp;object<br>\nfrozenset(iterable)&nbsp;-&gt;&nbsp;frozenset&nbsp;object<br>\n<br>\nBuild&nbsp;an&nbsp;immutable&nbsp;unordered&nbsp;collection&nbsp;of&nbsp;unique&nbsp;elements.",
    "getattr": "getattr(object,&nbsp;name[,&nbsp;default])&nbsp;-&gt;&nbsp;value<br>\n<br>\nGet&nbsp;a&nbsp;named&nbsp;attribute&nbsp;from&nbsp;an&nbsp;object;&nbsp;getattr(x,&nbsp;'y')&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;x.y.<br>\nWhen&nbsp;a&nbsp;default&nbsp;argument&nbsp;is&nbsp;given,&nbsp;it&nbsp;is&nbsp;returned&nbsp;when&nbsp;the&nbsp;attribute&nbsp;doesn't<br>\nexist;&nbsp;without&nbsp;it,&nbsp;an&nbsp;exception&nbsp;is&nbsp;raised&nbsp;in&nbsp;that&nbsp;case.",
    "globals": "Return&nbsp;the&nbsp;dictionary&nbsp;containing&nbsp;the&nbsp;current&nbsp;scope's&nbsp;global&nbsp;variables.<br>\n<br>\nNOTE:&nbsp;Updates&nbsp;to&nbsp;this&nbsp;dictionary&nbsp;*will*&nbsp;affect&nbsp;name&nbsp;lookups&nbsp;in&nbsp;the&nbsp;current<br>\nglobal&nbsp;scope&nbsp;and&nbsp;vice-versa.",
    "hasattr": "Return&nbsp;whether&nbsp;the&nbsp;object&nbsp;has&nbsp;an&nbsp;attribute&nbsp;with&nbsp;the&nbsp;given&nbsp;name.<br>\n<br>\nThis&nbsp;is&nbsp;done&nbsp;by&nbsp;calling&nbsp;getattr(obj,&nbsp;name)&nbsp;and&nbsp;catching&nbsp;AttributeError.",
    "hash": "Return&nbsp;the&nbsp;hash&nbsp;value&nbsp;for&nbsp;the&nbsp;given&nbsp;object.<br>\n<br>\nTwo&nbsp;objects&nbsp;that&nbsp;compare&nbsp;equal&nbsp;must&nbsp;also&nbsp;have&nbsp;the&nbsp;same&nbsp;hash&nbsp;value,&nbsp;but&nbsp;the<br>\nreverse&nbsp;is&nbsp;not&nbsp;necessarily&nbsp;true.",
    "hex": "Return&nbsp;the&nbsp;hexadecimal&nbsp;representation&nbsp;of&nbsp;an&nbsp;integer.<br>\n<br>\n&nbsp;&nbsp;&nbsp;&gt;&gt;&gt;&nbsp;hex(12648430)<br>\n&nbsp;&nbsp;&nbsp;'0xc0ffee'",
    "id": "Return&nbsp;the&nbsp;identity&nbsp;of&nbsp;an&nbsp;object.<br>\n<br>\nThis&nbsp;is&nbsp;guaranteed&nbsp;to&nbsp;be&nbsp;unique&nbsp;among&nbsp;simultaneously&nbsp;existing&nbsp;objects.<br>\n(CPython&nbsp;uses&nbsp;the&nbsp;object's&nbsp;memory&nbsp;address.)",
    "int": "int([x])&nbsp;-&gt;&nbsp;integer<br>\nint(x,&nbsp;base=10)&nbsp;-&gt;&nbsp;integer<br>\n<br>\nConvert&nbsp;a&nbsp;number&nbsp;or&nbsp;string&nbsp;to&nbsp;an&nbsp;integer,&nbsp;or&nbsp;return&nbsp;0&nbsp;if&nbsp;no&nbsp;arguments<br>\nare&nbsp;given.&nbsp;&nbsp;If&nbsp;x&nbsp;is&nbsp;a&nbsp;number,&nbsp;return&nbsp;x.__int__().&nbsp;&nbsp;For&nbsp;floating&nbsp;point<br>\nnumbers,&nbsp;this&nbsp;truncates&nbsp;towards&nbsp;zero.<br>\n<br>\nIf&nbsp;x&nbsp;is&nbsp;not&nbsp;a&nbsp;number&nbsp;or&nbsp;if&nbsp;base&nbsp;is&nbsp;given,&nbsp;then&nbsp;x&nbsp;must&nbsp;be&nbsp;a&nbsp;string,<br>\nbytes,&nbsp;or&nbsp;bytearray&nbsp;instance&nbsp;representing&nbsp;an&nbsp;integer&nbsp;literal&nbsp;in&nbsp;the<br>\ngiven&nbsp;base.&nbsp;&nbsp;The&nbsp;literal&nbsp;can&nbsp;be&nbsp;preceded&nbsp;by&nbsp;'+'&nbsp;or&nbsp;'-'&nbsp;and&nbsp;be&nbsp;surrounded<br>\nby&nbsp;whitespace.&nbsp;&nbsp;The&nbsp;base&nbsp;defaults&nbsp;to&nbsp;10.&nbsp;&nbsp;Valid&nbsp;bases&nbsp;are&nbsp;0&nbsp;and&nbsp;2-36.<br>\nBase&nbsp;0&nbsp;means&nbsp;to&nbsp;interpret&nbsp;the&nbsp;base&nbsp;from&nbsp;the&nbsp;string&nbsp;as&nbsp;an&nbsp;integer&nbsp;literal.<br>\n&gt;&gt;&gt;&nbsp;int('0b100',&nbsp;base=0)<br>\n4",
    "isinstance": "Return&nbsp;whether&nbsp;an&nbsp;object&nbsp;is&nbsp;an&nbsp;instance&nbsp;of&nbsp;a&nbsp;class&nbsp;or&nbsp;of&nbsp;a&nbsp;subclass&nbsp;thereof.<br>\n<br>\nA&nbsp;tuple,&nbsp;as&nbsp;in&nbsp;``isinstance(x,&nbsp;(A,&nbsp;B,&nbsp;...))``,&nbsp;may&nbsp;be&nbsp;given&nbsp;as&nbsp;the&nbsp;target&nbsp;to<br>\ncheck&nbsp;against.&nbsp;This&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;``isinstance(x,&nbsp;A)&nbsp;or&nbsp;isinstance(x,&nbsp;B)<br>\nor&nbsp;...``&nbsp;etc.",
    "issubclass": "Return&nbsp;whether&nbsp;'cls'&nbsp;is&nbsp;a&nbsp;derived&nbsp;from&nbsp;another&nbsp;class&nbsp;or&nbsp;is&nbsp;the&nbsp;same&nbsp;class.<br>\n<br>\nA&nbsp;tuple,&nbsp;as&nbsp;in&nbsp;``issubclass(x,&nbsp;(A,&nbsp;B,&nbsp;...))``,&nbsp;may&nbsp;be&nbsp;given&nbsp;as&nbsp;the&nbsp;target&nbsp;to<br>\ncheck&nbsp;against.&nbsp;This&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;``issubclass(x,&nbsp;A)&nbsp;or&nbsp;issubclass(x,&nbsp;B)<br>\nor&nbsp;...``&nbsp;etc.",
    "len": "Return&nbsp;the&nbsp;number&nbsp;of&nbsp;items&nbsp;in&nbsp;a&nbsp;container.",
    "list": "Built-in&nbsp;mutable&nbsp;sequence.<br>\n<br>\nIf&nbsp;no&nbsp;argument&nbsp;is&nbsp;given,&nbsp;the&nbsp;constructor&nbsp;creates&nbsp;a&nbsp;new&nbsp;empty&nbsp;list.<br>\nThe&nbsp;argument&nbsp;must&nbsp;be&nbsp;an&nbsp;iterable&nbsp;if&nbsp;specified.",
    "locals": "Return&nbsp;a&nbsp;dictionary&nbsp;containing&nbsp;the&nbsp;current&nbsp;scope's&nbsp;local&nbsp;variables.<br>\n<br>\nNOTE:&nbsp;Whether&nbsp;or&nbsp;not&nbsp;updates&nbsp;to&nbsp;this&nbsp;dictionary&nbsp;will&nbsp;affect&nbsp;name&nbsp;lookups&nbsp;in<br>\nthe&nbsp;local&nbsp;scope&nbsp;and&nbsp;vice-versa&nbsp;is&nbsp;*implementation&nbsp;dependent*&nbsp;and&nbsp;not<br>\ncovered&nbsp;by&nbsp;any&nbsp;backwards&nbsp;compatibility&nbsp;guarantees.",
    "map": "map(func,&nbsp;*iterables)&nbsp;--&gt;&nbsp;map&nbsp;object<br>\n<br>\nMake&nbsp;an&nbsp;iterator&nbsp;that&nbsp;computes&nbsp;the&nbsp;function&nbsp;using&nbsp;arguments&nbsp;from<br>\neach&nbsp;of&nbsp;the&nbsp;iterables.&nbsp;&nbsp;Stops&nbsp;when&nbsp;the&nbsp;shortest&nbsp;iterable&nbsp;is&nbsp;exhausted.",
    "max": "max(iterable,&nbsp;*[,&nbsp;default=obj,&nbsp;key=func])&nbsp;-&gt;&nbsp;value<br>\nmax(arg1,&nbsp;arg2,&nbsp;*args,&nbsp;*[,&nbsp;key=func])&nbsp;-&gt;&nbsp;value<br>\n<br>\nWith&nbsp;a&nbsp;single&nbsp;iterable&nbsp;argument,&nbsp;return&nbsp;its&nbsp;biggest&nbsp;item.&nbsp;The<br>\ndefault&nbsp;keyword-only&nbsp;argument&nbsp;specifies&nbsp;an&nbsp;object&nbsp;to&nbsp;return&nbsp;if<br>\nthe&nbsp;provided&nbsp;iterable&nbsp;is&nbsp;empty.<br>\nWith&nbsp;two&nbsp;or&nbsp;more&nbsp;arguments,&nbsp;return&nbsp;the&nbsp;largest&nbsp;argument.",
    "min": "min(iterable,&nbsp;*[,&nbsp;default=obj,&nbsp;key=func])&nbsp;-&gt;&nbsp;value<br>\nmin(arg1,&nbsp;arg2,&nbsp;*args,&nbsp;*[,&nbsp;key=func])&nbsp;-&gt;&nbsp;value<br>\n<br>\nWith&nbsp;a&nbsp;single&nbsp;iterable&nbsp;argument,&nbsp;return&nbsp;its&nbsp;smallest&nbsp;item.&nbsp;The<br>\ndefault&nbsp;keyword-only&nbsp;argument&nbsp;specifies&nbsp;an&nbsp;object&nbsp;to&nbsp;return&nbsp;if<br>\nthe&nbsp;provided&nbsp;iterable&nbsp;is&nbsp;empty.<br>\nWith&nbsp;two&nbsp;or&nbsp;more&nbsp;arguments,&nbsp;return&nbsp;the&nbsp;smallest&nbsp;argument.",
    "next": "next(iterator[,&nbsp;default])<br>\n<br>\nReturn&nbsp;the&nbsp;next&nbsp;item&nbsp;from&nbsp;the&nbsp;iterator.&nbsp;If&nbsp;default&nbsp;is&nbsp;given&nbsp;and&nbsp;the&nbsp;iterator<br>\nis&nbsp;exhausted,&nbsp;it&nbsp;is&nbsp;returned&nbsp;instead&nbsp;of&nbsp;raising&nbsp;StopIteration.",
    "oct": "Return&nbsp;the&nbsp;octal&nbsp;representation&nbsp;of&nbsp;an&nbsp;integer.<br>\n<br>\n&nbsp;&nbsp;&nbsp;&gt;&gt;&gt;&nbsp;oct(342391)<br>\n&nbsp;&nbsp;&nbsp;'0o1234567'",
    "open": "Open&nbsp;file&nbsp;and&nbsp;return&nbsp;a&nbsp;stream.&nbsp;&nbsp;Raise&nbsp;OSError&nbsp;upon&nbsp;failure.<br>\n<br>\nfile&nbsp;is&nbsp;either&nbsp;a&nbsp;text&nbsp;or&nbsp;byte&nbsp;string&nbsp;giving&nbsp;the&nbsp;name&nbsp;(and&nbsp;the&nbsp;path<br>\nif&nbsp;the&nbsp;file&nbsp;isn't&nbsp;in&nbsp;the&nbsp;current&nbsp;working&nbsp;directory)&nbsp;of&nbsp;the&nbsp;file&nbsp;to<br>\nbe&nbsp;opened&nbsp;or&nbsp;an&nbsp;integer&nbsp;file&nbsp;descriptor&nbsp;of&nbsp;the&nbsp;file&nbsp;to&nbsp;be<br>\nwrapped.&nbsp;(If&nbsp;a&nbsp;file&nbsp;descriptor&nbsp;is&nbsp;given,&nbsp;it&nbsp;is&nbsp;closed&nbsp;when&nbsp;the<br>\nreturned&nbsp;I/O&nbsp;object&nbsp;is&nbsp;closed,&nbsp;unless&nbsp;closefd&nbsp;is&nbsp;set&nbsp;to&nbsp;False.)<br>\n<br>\nmode&nbsp;is&nbsp;an&nbsp;optional&nbsp;string&nbsp;that&nbsp;specifies&nbsp;the&nbsp;mode&nbsp;in&nbsp;which&nbsp;the&nbsp;file<br>\nis&nbsp;opened.&nbsp;It&nbsp;defaults&nbsp;to&nbsp;'r'&nbsp;which&nbsp;means&nbsp;open&nbsp;for&nbsp;reading&nbsp;in&nbsp;text<br>\nmode.&nbsp;&nbsp;Other&nbsp;common&nbsp;values&nbsp;are&nbsp;'w'&nbsp;for&nbsp;writing&nbsp;(truncating&nbsp;the&nbsp;file&nbsp;if<br>\nit&nbsp;already&nbsp;exists),&nbsp;'x'&nbsp;for&nbsp;creating&nbsp;and&nbsp;writing&nbsp;to&nbsp;a&nbsp;new&nbsp;file,&nbsp;and<br>\n'a'&nbsp;for&nbsp;appending&nbsp;(which&nbsp;on&nbsp;some&nbsp;Unix&nbsp;systems,&nbsp;means&nbsp;that&nbsp;all&nbsp;writes<br>\nappend&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;file&nbsp;regardless&nbsp;of&nbsp;the&nbsp;current&nbsp;seek&nbsp;position).<br>\nIn&nbsp;text&nbsp;mode,&nbsp;if&nbsp;encoding&nbsp;is&nbsp;not&nbsp;specified&nbsp;the&nbsp;encoding&nbsp;used&nbsp;is&nbsp;platform<br>\ndependent:&nbsp;locale.getpreferredencoding(False)&nbsp;is&nbsp;called&nbsp;to&nbsp;get&nbsp;the<br>\ncurrent&nbsp;locale&nbsp;encoding.&nbsp;(For&nbsp;reading&nbsp;and&nbsp;writing&nbsp;raw&nbsp;bytes&nbsp;use&nbsp;binary<br>\nmode&nbsp;and&nbsp;leave&nbsp;encoding&nbsp;unspecified.)&nbsp;The&nbsp;available&nbsp;modes&nbsp;are:<br>\n<br>\n=========&nbsp;===============================================================<br>\nCharacter&nbsp;Meaning<br>\n---------&nbsp;---------------------------------------------------------------<br>\n'r'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;open&nbsp;for&nbsp;reading&nbsp;(default)<br>\n'w'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;open&nbsp;for&nbsp;writing,&nbsp;truncating&nbsp;the&nbsp;file&nbsp;first<br>\n'x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;create&nbsp;a&nbsp;new&nbsp;file&nbsp;and&nbsp;open&nbsp;it&nbsp;for&nbsp;writing<br>\n'a'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;open&nbsp;for&nbsp;writing,&nbsp;appending&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;file&nbsp;if&nbsp;it&nbsp;exists<br>\n'b'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binary&nbsp;mode<br>\n't'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text&nbsp;mode&nbsp;(default)<br>\n'+'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;open&nbsp;a&nbsp;disk&nbsp;file&nbsp;for&nbsp;updating&nbsp;(reading&nbsp;and&nbsp;writing)<br>\n'U'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;universal&nbsp;newline&nbsp;mode&nbsp;(deprecated)<br>\n=========&nbsp;===============================================================<br>\n<br>\nThe&nbsp;default&nbsp;mode&nbsp;is&nbsp;'rt'&nbsp;(open&nbsp;for&nbsp;reading&nbsp;text).&nbsp;For&nbsp;binary&nbsp;random<br>\naccess,&nbsp;the&nbsp;mode&nbsp;'w+b'&nbsp;opens&nbsp;and&nbsp;truncates&nbsp;the&nbsp;file&nbsp;to&nbsp;0&nbsp;bytes,&nbsp;while<br>\n'r+b'&nbsp;opens&nbsp;the&nbsp;file&nbsp;without&nbsp;truncation.&nbsp;The&nbsp;'x'&nbsp;mode&nbsp;implies&nbsp;'w'&nbsp;and<br>\nraises&nbsp;an&nbsp;`FileExistsError`&nbsp;if&nbsp;the&nbsp;file&nbsp;already&nbsp;exists.<br>\n<br>\nPython&nbsp;distinguishes&nbsp;between&nbsp;files&nbsp;opened&nbsp;in&nbsp;binary&nbsp;and&nbsp;text&nbsp;modes,<br>\neven&nbsp;when&nbsp;the&nbsp;underlying&nbsp;operating&nbsp;system&nbsp;doesn't.&nbsp;Files&nbsp;opened&nbsp;in<br>\nbinary&nbsp;mode&nbsp;(appending&nbsp;'b'&nbsp;to&nbsp;the&nbsp;mode&nbsp;argument)&nbsp;return&nbsp;contents&nbsp;as<br>\nbytes&nbsp;objects&nbsp;without&nbsp;any&nbsp;decoding.&nbsp;In&nbsp;text&nbsp;mode&nbsp;(the&nbsp;default,&nbsp;or&nbsp;when<br>\n't'&nbsp;is&nbsp;appended&nbsp;to&nbsp;the&nbsp;mode&nbsp;argument),&nbsp;the&nbsp;contents&nbsp;of&nbsp;the&nbsp;file&nbsp;are<br>\nreturned&nbsp;as&nbsp;strings,&nbsp;the&nbsp;bytes&nbsp;having&nbsp;been&nbsp;first&nbsp;decoded&nbsp;using&nbsp;a<br>\nplatform-dependent&nbsp;encoding&nbsp;or&nbsp;using&nbsp;the&nbsp;specified&nbsp;encoding&nbsp;if&nbsp;given.<br>\n<br>\n'U'&nbsp;mode&nbsp;is&nbsp;deprecated&nbsp;and&nbsp;will&nbsp;raise&nbsp;an&nbsp;exception&nbsp;in&nbsp;future&nbsp;versions<br>\nof&nbsp;Python.&nbsp;&nbsp;It&nbsp;has&nbsp;no&nbsp;effect&nbsp;in&nbsp;Python&nbsp;3.&nbsp;&nbsp;Use&nbsp;newline&nbsp;to&nbsp;control<br>\nuniversal&nbsp;newlines&nbsp;mode.<br>\n<br>\nbuffering&nbsp;is&nbsp;an&nbsp;optional&nbsp;integer&nbsp;used&nbsp;to&nbsp;set&nbsp;the&nbsp;buffering&nbsp;policy.<br>\nPass&nbsp;0&nbsp;to&nbsp;switch&nbsp;buffering&nbsp;off&nbsp;(only&nbsp;allowed&nbsp;in&nbsp;binary&nbsp;mode),&nbsp;1&nbsp;to&nbsp;select<br>\nline&nbsp;buffering&nbsp;(only&nbsp;usable&nbsp;in&nbsp;text&nbsp;mode),&nbsp;and&nbsp;an&nbsp;integer&nbsp;&gt;&nbsp;1&nbsp;to&nbsp;indicate<br>\nthe&nbsp;size&nbsp;of&nbsp;a&nbsp;fixed-size&nbsp;chunk&nbsp;buffer.&nbsp;&nbsp;When&nbsp;no&nbsp;buffering&nbsp;argument&nbsp;is<br>\ngiven,&nbsp;the&nbsp;default&nbsp;buffering&nbsp;policy&nbsp;works&nbsp;as&nbsp;follows:<br>\n<br>\n*&nbsp;Binary&nbsp;files&nbsp;are&nbsp;buffered&nbsp;in&nbsp;fixed-size&nbsp;chunks;&nbsp;the&nbsp;size&nbsp;of&nbsp;the&nbsp;buffer<br>\n&nbsp;&nbsp;is&nbsp;chosen&nbsp;using&nbsp;a&nbsp;heuristic&nbsp;trying&nbsp;to&nbsp;determine&nbsp;the&nbsp;underlying&nbsp;device's<br>\n&nbsp;&nbsp;&quot;block&nbsp;size&quot;&nbsp;and&nbsp;falling&nbsp;back&nbsp;on&nbsp;`io.DEFAULT_BUFFER_SIZE`.<br>\n&nbsp;&nbsp;On&nbsp;many&nbsp;systems,&nbsp;the&nbsp;buffer&nbsp;will&nbsp;typically&nbsp;be&nbsp;4096&nbsp;or&nbsp;8192&nbsp;bytes&nbsp;long.<br>\n<br>\n*&nbsp;&quot;Interactive&quot;&nbsp;text&nbsp;files&nbsp;(files&nbsp;for&nbsp;which&nbsp;isatty()&nbsp;returns&nbsp;True)<br>\n&nbsp;&nbsp;use&nbsp;line&nbsp;buffering.&nbsp;&nbsp;Other&nbsp;text&nbsp;files&nbsp;use&nbsp;the&nbsp;policy&nbsp;described&nbsp;above<br>\n&nbsp;&nbsp;for&nbsp;binary&nbsp;files.<br>\n<br>\nencoding&nbsp;is&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;encoding&nbsp;used&nbsp;to&nbsp;decode&nbsp;or&nbsp;encode&nbsp;the<br>\nfile.&nbsp;This&nbsp;should&nbsp;only&nbsp;be&nbsp;used&nbsp;in&nbsp;text&nbsp;mode.&nbsp;The&nbsp;default&nbsp;encoding&nbsp;is<br>\nplatform&nbsp;dependent,&nbsp;but&nbsp;any&nbsp;encoding&nbsp;supported&nbsp;by&nbsp;Python&nbsp;can&nbsp;be<br>\npassed.&nbsp;&nbsp;See&nbsp;the&nbsp;codecs&nbsp;module&nbsp;for&nbsp;the&nbsp;list&nbsp;of&nbsp;supported&nbsp;encodings.<br>\n<br>\nerrors&nbsp;is&nbsp;an&nbsp;optional&nbsp;string&nbsp;that&nbsp;specifies&nbsp;how&nbsp;encoding&nbsp;errors&nbsp;are&nbsp;to<br>\nbe&nbsp;handled---this&nbsp;argument&nbsp;should&nbsp;not&nbsp;be&nbsp;used&nbsp;in&nbsp;binary&nbsp;mode.&nbsp;Pass<br>\n'strict'&nbsp;to&nbsp;raise&nbsp;a&nbsp;ValueError&nbsp;exception&nbsp;if&nbsp;there&nbsp;is&nbsp;an&nbsp;encoding&nbsp;error<br>\n(the&nbsp;default&nbsp;of&nbsp;None&nbsp;has&nbsp;the&nbsp;same&nbsp;effect),&nbsp;or&nbsp;pass&nbsp;'ignore'&nbsp;to&nbsp;ignore<br>\nerrors.&nbsp;(Note&nbsp;that&nbsp;ignoring&nbsp;encoding&nbsp;errors&nbsp;can&nbsp;lead&nbsp;to&nbsp;data&nbsp;loss.)<br>\nSee&nbsp;the&nbsp;documentation&nbsp;for&nbsp;codecs.register&nbsp;or&nbsp;run&nbsp;'help(codecs.Codec)'<br>\nfor&nbsp;a&nbsp;list&nbsp;of&nbsp;the&nbsp;permitted&nbsp;encoding&nbsp;error&nbsp;strings.<br>\n<br>\nnewline&nbsp;controls&nbsp;how&nbsp;universal&nbsp;newlines&nbsp;works&nbsp;(it&nbsp;only&nbsp;applies&nbsp;to&nbsp;text<br>\nmode).&nbsp;It&nbsp;can&nbsp;be&nbsp;None,&nbsp;'',&nbsp;'&#92;n',&nbsp;'&#92;r',&nbsp;and&nbsp;'&#92;r&#92;n'.&nbsp;&nbsp;It&nbsp;works&nbsp;as<br>\nfollows:<br>\n<br>\n*&nbsp;On&nbsp;input,&nbsp;if&nbsp;newline&nbsp;is&nbsp;None,&nbsp;universal&nbsp;newlines&nbsp;mode&nbsp;is<br>\n&nbsp;&nbsp;enabled.&nbsp;Lines&nbsp;in&nbsp;the&nbsp;input&nbsp;can&nbsp;end&nbsp;in&nbsp;'&#92;n',&nbsp;'&#92;r',&nbsp;or&nbsp;'&#92;r&#92;n',&nbsp;and<br>\n&nbsp;&nbsp;these&nbsp;are&nbsp;translated&nbsp;into&nbsp;'&#92;n'&nbsp;before&nbsp;being&nbsp;returned&nbsp;to&nbsp;the<br>\n&nbsp;&nbsp;caller.&nbsp;If&nbsp;it&nbsp;is&nbsp;'',&nbsp;universal&nbsp;newline&nbsp;mode&nbsp;is&nbsp;enabled,&nbsp;but&nbsp;line<br>\n&nbsp;&nbsp;endings&nbsp;are&nbsp;returned&nbsp;to&nbsp;the&nbsp;caller&nbsp;untranslated.&nbsp;If&nbsp;it&nbsp;has&nbsp;any&nbsp;of<br>\n&nbsp;&nbsp;the&nbsp;other&nbsp;legal&nbsp;values,&nbsp;input&nbsp;lines&nbsp;are&nbsp;only&nbsp;terminated&nbsp;by&nbsp;the&nbsp;given<br>\n&nbsp;&nbsp;string,&nbsp;and&nbsp;the&nbsp;line&nbsp;ending&nbsp;is&nbsp;returned&nbsp;to&nbsp;the&nbsp;caller&nbsp;untranslated.<br>\n<br>\n*&nbsp;On&nbsp;output,&nbsp;if&nbsp;newline&nbsp;is&nbsp;None,&nbsp;any&nbsp;'&#92;n'&nbsp;characters&nbsp;written&nbsp;are<br>\n&nbsp;&nbsp;translated&nbsp;to&nbsp;the&nbsp;system&nbsp;default&nbsp;line&nbsp;separator,&nbsp;os.linesep.&nbsp;If<br>\n&nbsp;&nbsp;newline&nbsp;is&nbsp;''&nbsp;or&nbsp;'&#92;n',&nbsp;no&nbsp;translation&nbsp;takes&nbsp;place.&nbsp;If&nbsp;newline&nbsp;is&nbsp;any<br>\n&nbsp;&nbsp;of&nbsp;the&nbsp;other&nbsp;legal&nbsp;values,&nbsp;any&nbsp;'&#92;n'&nbsp;characters&nbsp;written&nbsp;are&nbsp;translated<br>\n&nbsp;&nbsp;to&nbsp;the&nbsp;given&nbsp;string.<br>\n<br>\nIf&nbsp;closefd&nbsp;is&nbsp;False,&nbsp;the&nbsp;underlying&nbsp;file&nbsp;descriptor&nbsp;will&nbsp;be&nbsp;kept&nbsp;open<br>\nwhen&nbsp;the&nbsp;file&nbsp;is&nbsp;closed.&nbsp;This&nbsp;does&nbsp;not&nbsp;work&nbsp;when&nbsp;a&nbsp;file&nbsp;name&nbsp;is&nbsp;given<br>\nand&nbsp;must&nbsp;be&nbsp;True&nbsp;in&nbsp;that&nbsp;case.<br>\n<br>\nA&nbsp;custom&nbsp;opener&nbsp;can&nbsp;be&nbsp;used&nbsp;by&nbsp;passing&nbsp;a&nbsp;callable&nbsp;as&nbsp;*opener*.&nbsp;The<br>\nunderlying&nbsp;file&nbsp;descriptor&nbsp;for&nbsp;the&nbsp;file&nbsp;object&nbsp;is&nbsp;then&nbsp;obtained&nbsp;by<br>\ncalling&nbsp;*opener*&nbsp;with&nbsp;(*file*,&nbsp;*flags*).&nbsp;*opener*&nbsp;must&nbsp;return&nbsp;an&nbsp;open<br>\nfile&nbsp;descriptor&nbsp;(passing&nbsp;os.open&nbsp;as&nbsp;*opener*&nbsp;results&nbsp;in&nbsp;functionality<br>\nsimilar&nbsp;to&nbsp;passing&nbsp;None).<br>\n<br>\nopen()&nbsp;returns&nbsp;a&nbsp;file&nbsp;object&nbsp;whose&nbsp;type&nbsp;depends&nbsp;on&nbsp;the&nbsp;mode,&nbsp;and<br>\nthrough&nbsp;which&nbsp;the&nbsp;standard&nbsp;file&nbsp;operations&nbsp;such&nbsp;as&nbsp;reading&nbsp;and&nbsp;writing<br>\nare&nbsp;performed.&nbsp;When&nbsp;open()&nbsp;is&nbsp;used&nbsp;to&nbsp;open&nbsp;a&nbsp;file&nbsp;in&nbsp;a&nbsp;text&nbsp;mode&nbsp;('w',<br>\n'r',&nbsp;'wt',&nbsp;'rt',&nbsp;etc.),&nbsp;it&nbsp;returns&nbsp;a&nbsp;TextIOWrapper.&nbsp;When&nbsp;used&nbsp;to&nbsp;open<br>\na&nbsp;file&nbsp;in&nbsp;a&nbsp;binary&nbsp;mode,&nbsp;the&nbsp;returned&nbsp;class&nbsp;varies:&nbsp;in&nbsp;read&nbsp;binary<br>\nmode,&nbsp;it&nbsp;returns&nbsp;a&nbsp;BufferedReader;&nbsp;in&nbsp;write&nbsp;binary&nbsp;and&nbsp;append&nbsp;binary<br>\nmodes,&nbsp;it&nbsp;returns&nbsp;a&nbsp;BufferedWriter,&nbsp;and&nbsp;in&nbsp;read/write&nbsp;mode,&nbsp;it&nbsp;returns<br>\na&nbsp;BufferedRandom.<br>\n<br>\nIt&nbsp;is&nbsp;also&nbsp;possible&nbsp;to&nbsp;use&nbsp;a&nbsp;string&nbsp;or&nbsp;bytearray&nbsp;as&nbsp;a&nbsp;file&nbsp;for&nbsp;both<br>\nreading&nbsp;and&nbsp;writing.&nbsp;For&nbsp;strings&nbsp;StringIO&nbsp;can&nbsp;be&nbsp;used&nbsp;like&nbsp;a&nbsp;file<br>\nopened&nbsp;in&nbsp;a&nbsp;text&nbsp;mode,&nbsp;and&nbsp;for&nbsp;bytes&nbsp;a&nbsp;BytesIO&nbsp;can&nbsp;be&nbsp;used&nbsp;like&nbsp;a&nbsp;file<br>\nopened&nbsp;in&nbsp;a&nbsp;binary&nbsp;mode.",
    "ord": "Return&nbsp;the&nbsp;Unicode&nbsp;code&nbsp;point&nbsp;for&nbsp;a&nbsp;one-character&nbsp;string.",
    "pow": "Equivalent&nbsp;to&nbsp;x**y&nbsp;(with&nbsp;two&nbsp;arguments)&nbsp;or&nbsp;x**y&nbsp;%&nbsp;z&nbsp;(with&nbsp;three&nbsp;arguments)<br>\n<br>\nSome&nbsp;types,&nbsp;such&nbsp;as&nbsp;ints,&nbsp;are&nbsp;able&nbsp;to&nbsp;use&nbsp;a&nbsp;more&nbsp;efficient&nbsp;algorithm&nbsp;when<br>\ninvoked&nbsp;using&nbsp;the&nbsp;three&nbsp;argument&nbsp;form.",
    "print": "print(value,&nbsp;...,&nbsp;sep='&nbsp;',&nbsp;end='&#92;n',&nbsp;file=sys.stdout,&nbsp;flush=False)<br>\n<br>\nPrints&nbsp;the&nbsp;values&nbsp;to&nbsp;a&nbsp;stream,&nbsp;or&nbsp;to&nbsp;sys.stdout&nbsp;by&nbsp;default.<br>\nOptional&nbsp;keyword&nbsp;arguments:<br>\nfile:&nbsp;&nbsp;a&nbsp;file-like&nbsp;object&nbsp;(stream);&nbsp;defaults&nbsp;to&nbsp;the&nbsp;current&nbsp;sys.stdout.<br>\nsep:&nbsp;&nbsp;&nbsp;string&nbsp;inserted&nbsp;between&nbsp;values,&nbsp;default&nbsp;a&nbsp;space.<br>\nend:&nbsp;&nbsp;&nbsp;string&nbsp;appended&nbsp;after&nbsp;the&nbsp;last&nbsp;value,&nbsp;default&nbsp;a&nbsp;newline.<br>\nflush:&nbsp;whether&nbsp;to&nbsp;forcibly&nbsp;flush&nbsp;the&nbsp;stream.",
    "property": "Property&nbsp;attribute.<br>\n<br>\n&nbsp;&nbsp;fget<br>\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;getting&nbsp;an&nbsp;attribute&nbsp;value<br>\n&nbsp;&nbsp;fset<br>\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;setting&nbsp;an&nbsp;attribute&nbsp;value<br>\n&nbsp;&nbsp;fdel<br>\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;del'ing&nbsp;an&nbsp;attribute<br>\n&nbsp;&nbsp;doc<br>\n&nbsp;&nbsp;&nbsp;&nbsp;docstring<br>\n<br>\nTypical&nbsp;use&nbsp;is&nbsp;to&nbsp;define&nbsp;a&nbsp;managed&nbsp;attribute&nbsp;x:<br>\n<br>\nclass&nbsp;C(object):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;getx(self):&nbsp;return&nbsp;self._x<br>\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;setx(self,&nbsp;value):&nbsp;self._x&nbsp;=&nbsp;value<br>\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;delx(self):&nbsp;del&nbsp;self._x<br>\n&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;property(getx,&nbsp;setx,&nbsp;delx,&nbsp;&quot;I'm&nbsp;the&nbsp;'x'&nbsp;property.&quot;)<br>\n<br>\nDecorators&nbsp;make&nbsp;defining&nbsp;new&nbsp;properties&nbsp;or&nbsp;modifying&nbsp;existing&nbsp;ones&nbsp;easy:<br>\n<br>\nclass&nbsp;C(object):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;@property<br>\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;x(self):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;I&nbsp;am&nbsp;the&nbsp;'x'&nbsp;property.&quot;<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;self._x<br>\n&nbsp;&nbsp;&nbsp;&nbsp;@x.setter<br>\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;x(self,&nbsp;value):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._x&nbsp;=&nbsp;value<br>\n&nbsp;&nbsp;&nbsp;&nbsp;@x.deleter<br>\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;x(self):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;del&nbsp;self._x",
    "range": "range(stop)&nbsp;-&gt;&nbsp;range&nbsp;object<br>\nrange(start,&nbsp;stop[,&nbsp;step])&nbsp;-&gt;&nbsp;range&nbsp;object<br>\n<br>\nReturn&nbsp;an&nbsp;object&nbsp;that&nbsp;produces&nbsp;a&nbsp;sequence&nbsp;of&nbsp;integers&nbsp;from&nbsp;start&nbsp;(inclusive)<br>\nto&nbsp;stop&nbsp;(exclusive)&nbsp;by&nbsp;step.&nbsp;&nbsp;range(i,&nbsp;j)&nbsp;produces&nbsp;i,&nbsp;i+1,&nbsp;i+2,&nbsp;...,&nbsp;j-1.<br>\nstart&nbsp;defaults&nbsp;to&nbsp;0,&nbsp;and&nbsp;stop&nbsp;is&nbsp;omitted!&nbsp;&nbsp;range(4)&nbsp;produces&nbsp;0,&nbsp;1,&nbsp;2,&nbsp;3.<br>\nThese&nbsp;are&nbsp;exactly&nbsp;the&nbsp;valid&nbsp;indices&nbsp;for&nbsp;a&nbsp;list&nbsp;of&nbsp;4&nbsp;elements.<br>\nWhen&nbsp;step&nbsp;is&nbsp;given,&nbsp;it&nbsp;specifies&nbsp;the&nbsp;increment&nbsp;(or&nbsp;decrement).",
    "str.capitalize": "Return&nbsp;a&nbsp;capitalized&nbsp;version&nbsp;of&nbsp;the&nbsp;string.<br>\n<br>\nMore&nbsp;specifically,&nbsp;make&nbsp;the&nbsp;first&nbsp;character&nbsp;have&nbsp;upper&nbsp;case&nbsp;and&nbsp;the&nbsp;rest&nbsp;lower<br>\ncase."
};