var docstrings = {
    "abs": "abs(x)<br>\n<br>\nReturn&nbsp;the&nbsp;absolute&nbsp;value&nbsp;of&nbsp;the&nbsp;argument.",
    "all": "all(iterable)<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;bool(x)&nbsp;is&nbsp;True&nbsp;for&nbsp;all&nbsp;values&nbsp;x&nbsp;in&nbsp;the&nbsp;iterable.<br>\n<br>\nIf&nbsp;the&nbsp;iterable&nbsp;is&nbsp;empty,&nbsp;return&nbsp;True.",
    "any": "any(iterable)<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;bool(x)&nbsp;is&nbsp;True&nbsp;for&nbsp;any&nbsp;x&nbsp;in&nbsp;the&nbsp;iterable.<br>\n<br>\nIf&nbsp;the&nbsp;iterable&nbsp;is&nbsp;empty,&nbsp;return&nbsp;False.",
    "ascii": "ascii(obj)<br>\n<br>\nReturn&nbsp;an&nbsp;ASCII-only&nbsp;representation&nbsp;of&nbsp;an&nbsp;object.<br>\n<br>\nAs&nbsp;repr(),&nbsp;return&nbsp;a&nbsp;string&nbsp;containing&nbsp;a&nbsp;printable&nbsp;representation&nbsp;of&nbsp;an<br>\nobject,&nbsp;but&nbsp;escape&nbsp;the&nbsp;non-ASCII&nbsp;characters&nbsp;in&nbsp;the&nbsp;string&nbsp;returned&nbsp;by<br>\nrepr()&nbsp;using&nbsp;&#92;&#92;x,&nbsp;&#92;&#92;u&nbsp;or&nbsp;&#92;&#92;U&nbsp;escapes.&nbsp;This&nbsp;generates&nbsp;a&nbsp;string&nbsp;similar<br>\nto&nbsp;that&nbsp;returned&nbsp;by&nbsp;repr()&nbsp;in&nbsp;Python&nbsp;2.",
    "bin": "bin(number)<br>\n<br>\nReturn&nbsp;the&nbsp;binary&nbsp;representation&nbsp;of&nbsp;an&nbsp;integer.<br>\n<br>\n&nbsp;&nbsp;&nbsp;&gt;&gt;&gt;&nbsp;bin(2796202)<br>\n&nbsp;&nbsp;&nbsp;'0b1010101010101010101010'",
    "bool": "bool(x)&nbsp;-&gt;&nbsp;bool<br>\n<br>\nReturns&nbsp;True&nbsp;when&nbsp;the&nbsp;argument&nbsp;x&nbsp;is&nbsp;true,&nbsp;False&nbsp;otherwise.<br>\nThe&nbsp;builtins&nbsp;True&nbsp;and&nbsp;False&nbsp;are&nbsp;the&nbsp;only&nbsp;two&nbsp;instances&nbsp;of&nbsp;the&nbsp;class&nbsp;bool.<br>\nThe&nbsp;class&nbsp;bool&nbsp;is&nbsp;a&nbsp;subclass&nbsp;of&nbsp;the&nbsp;class&nbsp;int,&nbsp;and&nbsp;cannot&nbsp;be&nbsp;subclassed.",
    "bytearray": "bytearray(iterable_of_ints)&nbsp;-&gt;&nbsp;bytearray<br>\nbytearray(string,&nbsp;encoding[,&nbsp;errors])&nbsp;-&gt;&nbsp;bytearray<br>\nbytearray(bytes_or_buffer)&nbsp;-&gt;&nbsp;mutable&nbsp;copy&nbsp;of&nbsp;bytes_or_buffer<br>\nbytearray(int)&nbsp;-&gt;&nbsp;bytes&nbsp;array&nbsp;of&nbsp;size&nbsp;given&nbsp;by&nbsp;the&nbsp;parameter&nbsp;initialized&nbsp;with&nbsp;null&nbsp;bytes<br>\nbytearray()&nbsp;-&gt;&nbsp;empty&nbsp;bytes&nbsp;array<br>\n<br>\nConstruct&nbsp;a&nbsp;mutable&nbsp;bytearray&nbsp;object&nbsp;from:<br>\n&nbsp;&nbsp;-&nbsp;an&nbsp;iterable&nbsp;yielding&nbsp;integers&nbsp;in&nbsp;range(256)<br>\n&nbsp;&nbsp;-&nbsp;a&nbsp;text&nbsp;string&nbsp;encoded&nbsp;using&nbsp;the&nbsp;specified&nbsp;encoding<br>\n&nbsp;&nbsp;-&nbsp;a&nbsp;bytes&nbsp;or&nbsp;a&nbsp;buffer&nbsp;object<br>\n&nbsp;&nbsp;-&nbsp;any&nbsp;object&nbsp;implementing&nbsp;the&nbsp;buffer&nbsp;API.<br>\n&nbsp;&nbsp;-&nbsp;an&nbsp;integer",
    "bytearray.fromhex": "bytearray.fromhex($type,&nbsp;string)<br>\n<br>\nCreate&nbsp;a&nbsp;bytearray&nbsp;object&nbsp;from&nbsp;a&nbsp;string&nbsp;of&nbsp;hexadecimal&nbsp;numbers.<br>\n<br>\nSpaces&nbsp;between&nbsp;two&nbsp;numbers&nbsp;are&nbsp;accepted.<br>\nExample:&nbsp;bytearray.fromhex('B9&nbsp;01EF')&nbsp;-&gt;&nbsp;bytearray(b'&#92;&#92;xb9&#92;&#92;x01&#92;&#92;xef')",
    "bytearray.hex": "B.hex()&nbsp;-&gt;&nbsp;string<br>\n<br>\nCreate&nbsp;a&nbsp;string&nbsp;of&nbsp;hexadecimal&nbsp;numbers&nbsp;from&nbsp;a&nbsp;bytearray&nbsp;object.<br>\nExample:&nbsp;bytearray([0xb9,&nbsp;0x01,&nbsp;0xef]).hex()&nbsp;-&gt;&nbsp;'b901ef'.",
    "bytes": "bytes(iterable_of_ints)&nbsp;-&gt;&nbsp;bytes<br>\nbytes(string,&nbsp;encoding[,&nbsp;errors])&nbsp;-&gt;&nbsp;bytes<br>\nbytes(bytes_or_buffer)&nbsp;-&gt;&nbsp;immutable&nbsp;copy&nbsp;of&nbsp;bytes_or_buffer<br>\nbytes(int)&nbsp;-&gt;&nbsp;bytes&nbsp;object&nbsp;of&nbsp;size&nbsp;given&nbsp;by&nbsp;the&nbsp;parameter&nbsp;initialized&nbsp;with&nbsp;null&nbsp;bytes<br>\nbytes()&nbsp;-&gt;&nbsp;empty&nbsp;bytes&nbsp;object<br>\n<br>\nConstruct&nbsp;an&nbsp;immutable&nbsp;array&nbsp;of&nbsp;bytes&nbsp;from:<br>\n&nbsp;&nbsp;-&nbsp;an&nbsp;iterable&nbsp;yielding&nbsp;integers&nbsp;in&nbsp;range(256)<br>\n&nbsp;&nbsp;-&nbsp;a&nbsp;text&nbsp;string&nbsp;encoded&nbsp;using&nbsp;the&nbsp;specified&nbsp;encoding<br>\n&nbsp;&nbsp;-&nbsp;any&nbsp;object&nbsp;implementing&nbsp;the&nbsp;buffer&nbsp;API.<br>\n&nbsp;&nbsp;-&nbsp;an&nbsp;integer",
    "calendar.Calendar.monthdatescalendar": "<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return&nbsp;a&nbsp;matrix&nbsp;(list&nbsp;of&nbsp;lists)&nbsp;representing&nbsp;a&nbsp;month's&nbsp;calendar.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Each&nbsp;row&nbsp;represents&nbsp;a&nbsp;week;&nbsp;week&nbsp;entries&nbsp;are&nbsp;datetime.date&nbsp;values.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
    "callable": "callable(obj)<br>\n<br>\nReturn&nbsp;whether&nbsp;the&nbsp;object&nbsp;is&nbsp;callable&nbsp;(i.e.,&nbsp;some&nbsp;kind&nbsp;of&nbsp;function).<br>\n<br>\nNote&nbsp;that&nbsp;classes&nbsp;are&nbsp;callable,&nbsp;as&nbsp;are&nbsp;instances&nbsp;of&nbsp;classes&nbsp;with&nbsp;a<br>\n__call__()&nbsp;method.",
    "chr": "chr(i)<br>\n<br>\nReturn&nbsp;a&nbsp;Unicode&nbsp;string&nbsp;of&nbsp;one&nbsp;character&nbsp;with&nbsp;ordinal&nbsp;i;&nbsp;0&nbsp;&lt;=&nbsp;i&nbsp;&lt;=&nbsp;0x10ffff.",
    "classmethod": "classmethod(function)&nbsp;-&gt;&nbsp;method<br>\n<br>\nConvert&nbsp;a&nbsp;function&nbsp;to&nbsp;be&nbsp;a&nbsp;class&nbsp;method.<br>\n<br>\nA&nbsp;class&nbsp;method&nbsp;receives&nbsp;the&nbsp;class&nbsp;as&nbsp;implicit&nbsp;first&nbsp;argument,<br>\njust&nbsp;like&nbsp;an&nbsp;instance&nbsp;method&nbsp;receives&nbsp;the&nbsp;instance.<br>\nTo&nbsp;declare&nbsp;a&nbsp;class&nbsp;method,&nbsp;use&nbsp;this&nbsp;idiom:<br>\n<br>\n&nbsp;&nbsp;class&nbsp;C:<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@classmethod<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;f(cls,&nbsp;arg1,&nbsp;arg2,&nbsp;...):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>\n<br>\nIt&nbsp;can&nbsp;be&nbsp;called&nbsp;either&nbsp;on&nbsp;the&nbsp;class&nbsp;(e.g.&nbsp;C.f())&nbsp;or&nbsp;on&nbsp;an&nbsp;instance<br>\n(e.g.&nbsp;C().f()).&nbsp;&nbsp;The&nbsp;instance&nbsp;is&nbsp;ignored&nbsp;except&nbsp;for&nbsp;its&nbsp;class.<br>\nIf&nbsp;a&nbsp;class&nbsp;method&nbsp;is&nbsp;called&nbsp;for&nbsp;a&nbsp;derived&nbsp;class,&nbsp;the&nbsp;derived&nbsp;class<br>\nobject&nbsp;is&nbsp;passed&nbsp;as&nbsp;the&nbsp;implied&nbsp;first&nbsp;argument.<br>\n<br>\nClass&nbsp;methods&nbsp;are&nbsp;different&nbsp;than&nbsp;C++&nbsp;or&nbsp;Java&nbsp;static&nbsp;methods.<br>\nIf&nbsp;you&nbsp;want&nbsp;those,&nbsp;see&nbsp;the&nbsp;staticmethod&nbsp;builtin.",
    "complex": "complex(real=0,&nbsp;imag=0)<br>\n<br>\nCreate&nbsp;a&nbsp;complex&nbsp;number&nbsp;from&nbsp;a&nbsp;real&nbsp;part&nbsp;and&nbsp;an&nbsp;optional&nbsp;imaginary&nbsp;part.<br>\n<br>\nThis&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;(real&nbsp;+&nbsp;imag*1j)&nbsp;where&nbsp;imag&nbsp;defaults&nbsp;to&nbsp;0.",
    "datetime.date": "date(year,&nbsp;month,&nbsp;day)&nbsp;--&gt;&nbsp;date&nbsp;object",
    "datetime.date.ctime": "Return&nbsp;ctime()&nbsp;style&nbsp;string.",
    "datetime.date.fromisoformat": "str&nbsp;-&gt;&nbsp;Construct&nbsp;a&nbsp;date&nbsp;from&nbsp;the&nbsp;output&nbsp;of&nbsp;date.isoformat()",
    "datetime.date.fromordinal": "int&nbsp;-&gt;&nbsp;date&nbsp;corresponding&nbsp;to&nbsp;a&nbsp;proleptic&nbsp;Gregorian&nbsp;ordinal.",
    "datetime.date.fromtimestamp": "timestamp&nbsp;-&gt;&nbsp;local&nbsp;date&nbsp;from&nbsp;a&nbsp;POSIX&nbsp;timestamp&nbsp;(like&nbsp;time.time()).",
    "datetime.date.isocalendar": "Return&nbsp;a&nbsp;3-tuple&nbsp;containing&nbsp;ISO&nbsp;year,&nbsp;week&nbsp;number,&nbsp;and&nbsp;weekday.",
    "datetime.date.isoformat": "Return&nbsp;string&nbsp;in&nbsp;ISO&nbsp;8601&nbsp;format,&nbsp;YYYY-MM-DD.",
    "datetime.date.isoweekday": "Return&nbsp;the&nbsp;day&nbsp;of&nbsp;the&nbsp;week&nbsp;represented&nbsp;by&nbsp;the&nbsp;date.<br>\nMonday&nbsp;==&nbsp;1&nbsp;...&nbsp;Sunday&nbsp;==&nbsp;7",
    "datetime.date.replace": "Return&nbsp;date&nbsp;with&nbsp;new&nbsp;specified&nbsp;fields.",
    "datetime.date.strftime": "format&nbsp;-&gt;&nbsp;strftime()&nbsp;style&nbsp;string.",
    "datetime.date.timetuple": "Return&nbsp;time&nbsp;tuple,&nbsp;compatible&nbsp;with&nbsp;time.localtime().",
    "datetime.date.today": "Current&nbsp;date&nbsp;or&nbsp;datetime:&nbsp;&nbsp;same&nbsp;as&nbsp;self.__class__.fromtimestamp(time.time()).",
    "datetime.date.toordinal": "Return&nbsp;proleptic&nbsp;Gregorian&nbsp;ordinal.&nbsp;&nbsp;January&nbsp;1&nbsp;of&nbsp;year&nbsp;1&nbsp;is&nbsp;day&nbsp;1.",
    "datetime.date.weekday": "Return&nbsp;the&nbsp;day&nbsp;of&nbsp;the&nbsp;week&nbsp;represented&nbsp;by&nbsp;the&nbsp;date.<br>\nMonday&nbsp;==&nbsp;0&nbsp;...&nbsp;Sunday&nbsp;==&nbsp;6",
    "datetime.datetime": "datetime(year,&nbsp;month,&nbsp;day[,&nbsp;hour[,&nbsp;minute[,&nbsp;second[,&nbsp;microsecond[,tzinfo]]]]])<br>\n<br>\nThe&nbsp;year,&nbsp;month&nbsp;and&nbsp;day&nbsp;arguments&nbsp;are&nbsp;required.&nbsp;tzinfo&nbsp;may&nbsp;be&nbsp;None,&nbsp;or&nbsp;an<br>\ninstance&nbsp;of&nbsp;a&nbsp;tzinfo&nbsp;subclass.&nbsp;The&nbsp;remaining&nbsp;arguments&nbsp;may&nbsp;be&nbsp;ints.<br>\n",
    "datetime.datetime.astimezone": "tz&nbsp;-&gt;&nbsp;convert&nbsp;to&nbsp;local&nbsp;time&nbsp;in&nbsp;new&nbsp;timezone&nbsp;tz<br>\n",
    "datetime.datetime.combine": "date,&nbsp;time&nbsp;-&gt;&nbsp;datetime&nbsp;with&nbsp;same&nbsp;date&nbsp;and&nbsp;time&nbsp;fields",
    "datetime.datetime.dst": "Return&nbsp;self.tzinfo.dst(self).",
    "datetime.datetime.fromisoformat": "string&nbsp;-&gt;&nbsp;datetime&nbsp;from&nbsp;datetime.isoformat()&nbsp;output",
    "datetime.datetime.fromordinal": "int&nbsp;-&gt;&nbsp;date&nbsp;corresponding&nbsp;to&nbsp;a&nbsp;proleptic&nbsp;Gregorian&nbsp;ordinal.",
    "datetime.datetime.fromtimestamp": "timestamp[,&nbsp;tz]&nbsp;-&gt;&nbsp;tz's&nbsp;local&nbsp;time&nbsp;from&nbsp;POSIX&nbsp;timestamp.",
    "datetime.datetime.now": "datetime.datetime.now($type,&nbsp;/,&nbsp;tz=None)<br>\n<br>\nReturns&nbsp;new&nbsp;datetime&nbsp;object&nbsp;representing&nbsp;current&nbsp;time&nbsp;local&nbsp;to&nbsp;tz.<br>\n<br>\n&nbsp;&nbsp;tz<br>\n&nbsp;&nbsp;&nbsp;&nbsp;Timezone&nbsp;object.<br>\n<br>\nIf&nbsp;no&nbsp;tz&nbsp;is&nbsp;specified,&nbsp;uses&nbsp;local&nbsp;timezone.",
    "datetime.datetime.replace": "Return&nbsp;datetime&nbsp;with&nbsp;new&nbsp;specified&nbsp;fields.",
    "datetime.datetime.strptime": "string,&nbsp;format&nbsp;-&gt;&nbsp;new&nbsp;datetime&nbsp;parsed&nbsp;from&nbsp;a&nbsp;string&nbsp;(like&nbsp;time.strptime()).",
    "datetime.datetime.timestamp": "Return&nbsp;POSIX&nbsp;timestamp&nbsp;as&nbsp;float.",
    "datetime.datetime.timetuple": "Return&nbsp;time&nbsp;tuple,&nbsp;compatible&nbsp;with&nbsp;time.localtime().",
    "datetime.datetime.timetz": "Return&nbsp;time&nbsp;object&nbsp;with&nbsp;same&nbsp;time&nbsp;and&nbsp;tzinfo.",
    "datetime.datetime.today": "Current&nbsp;date&nbsp;or&nbsp;datetime:&nbsp;&nbsp;same&nbsp;as&nbsp;self.__class__.fromtimestamp(time.time()).",
    "datetime.datetime.toordinal": "Return&nbsp;proleptic&nbsp;Gregorian&nbsp;ordinal.&nbsp;&nbsp;January&nbsp;1&nbsp;of&nbsp;year&nbsp;1&nbsp;is&nbsp;day&nbsp;1.",
    "datetime.datetime.tzname": "Return&nbsp;self.tzinfo.tzname(self).",
    "datetime.datetime.utcfromtimestamp": "Construct&nbsp;a&nbsp;naive&nbsp;UTC&nbsp;datetime&nbsp;from&nbsp;a&nbsp;POSIX&nbsp;timestamp.",
    "datetime.datetime.utcoffset": "Return&nbsp;self.tzinfo.utcoffset(self).",
    "datetime.datetime.utctimetuple": "Return&nbsp;UTC&nbsp;time&nbsp;tuple,&nbsp;compatible&nbsp;with&nbsp;time.localtime().",
    "datetime.time": "time([hour[,&nbsp;minute[,&nbsp;second[,&nbsp;microsecond[,&nbsp;tzinfo]]]]])&nbsp;--&gt;&nbsp;a&nbsp;time&nbsp;object<br>\n<br>\nAll&nbsp;arguments&nbsp;are&nbsp;optional.&nbsp;tzinfo&nbsp;may&nbsp;be&nbsp;None,&nbsp;or&nbsp;an&nbsp;instance&nbsp;of<br>\na&nbsp;tzinfo&nbsp;subclass.&nbsp;The&nbsp;remaining&nbsp;arguments&nbsp;may&nbsp;be&nbsp;ints.<br>\n",
    "delattr": "delattr(obj,&nbsp;name)<br>\n<br>\nDeletes&nbsp;the&nbsp;named&nbsp;attribute&nbsp;from&nbsp;the&nbsp;given&nbsp;object.<br>\n<br>\ndelattr(x,&nbsp;'y')&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;``del&nbsp;x.y''",
    "dict": "dict()&nbsp;-&gt;&nbsp;new&nbsp;empty&nbsp;dictionary<br>\ndict(mapping)&nbsp;-&gt;&nbsp;new&nbsp;dictionary&nbsp;initialized&nbsp;from&nbsp;a&nbsp;mapping&nbsp;object's<br>\n&nbsp;&nbsp;&nbsp;&nbsp;(key,&nbsp;value)&nbsp;pairs<br>\ndict(iterable)&nbsp;-&gt;&nbsp;new&nbsp;dictionary&nbsp;initialized&nbsp;as&nbsp;if&nbsp;via:<br>\n&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;{}<br>\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;k,&nbsp;v&nbsp;in&nbsp;iterable:<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d[k]&nbsp;=&nbsp;v<br>\ndict(**kwargs)&nbsp;-&gt;&nbsp;new&nbsp;dictionary&nbsp;initialized&nbsp;with&nbsp;the&nbsp;name=value&nbsp;pairs<br>\n&nbsp;&nbsp;&nbsp;&nbsp;in&nbsp;the&nbsp;keyword&nbsp;argument&nbsp;list.&nbsp;&nbsp;For&nbsp;example:&nbsp;&nbsp;dict(one=1,&nbsp;two=2)",
    "dict.clear": "D.clear()&nbsp;-&gt;&nbsp;None.&nbsp;&nbsp;Remove&nbsp;all&nbsp;items&nbsp;from&nbsp;D.",
    "dict.copy": "D.copy()&nbsp;-&gt;&nbsp;a&nbsp;shallow&nbsp;copy&nbsp;of&nbsp;D",
    "dict.fromkeys": "dict.fromkeys($type,&nbsp;iterable,&nbsp;value=None)<br>\n<br>\nCreate&nbsp;a&nbsp;new&nbsp;dictionary&nbsp;with&nbsp;keys&nbsp;from&nbsp;iterable&nbsp;and&nbsp;values&nbsp;set&nbsp;to&nbsp;value.",
    "dict.get": "dict.get(key,&nbsp;default=None)<br>\n<br>\nReturn&nbsp;the&nbsp;value&nbsp;for&nbsp;key&nbsp;if&nbsp;key&nbsp;is&nbsp;in&nbsp;the&nbsp;dictionary,&nbsp;else&nbsp;default.",
    "dict.items": "D.items()&nbsp;-&gt;&nbsp;a&nbsp;set-like&nbsp;object&nbsp;providing&nbsp;a&nbsp;view&nbsp;on&nbsp;D's&nbsp;items",
    "dict.keys": "D.keys()&nbsp;-&gt;&nbsp;a&nbsp;set-like&nbsp;object&nbsp;providing&nbsp;a&nbsp;view&nbsp;on&nbsp;D's&nbsp;keys",
    "dict.pop": "D.pop(k[,d])&nbsp;-&gt;&nbsp;v,&nbsp;remove&nbsp;specified&nbsp;key&nbsp;and&nbsp;return&nbsp;the&nbsp;corresponding&nbsp;value.<br>\nIf&nbsp;key&nbsp;is&nbsp;not&nbsp;found,&nbsp;d&nbsp;is&nbsp;returned&nbsp;if&nbsp;given,&nbsp;otherwise&nbsp;KeyError&nbsp;is&nbsp;raised",
    "dict.popitem": "D.popitem()&nbsp;-&gt;&nbsp;(k,&nbsp;v),&nbsp;remove&nbsp;and&nbsp;return&nbsp;some&nbsp;(key,&nbsp;value)&nbsp;pair&nbsp;as&nbsp;a<br>\n2-tuple;&nbsp;but&nbsp;raise&nbsp;KeyError&nbsp;if&nbsp;D&nbsp;is&nbsp;empty.",
    "dict.setdefault": "dict.setdefault(key,&nbsp;default=None)<br>\n<br>\nInsert&nbsp;key&nbsp;with&nbsp;a&nbsp;value&nbsp;of&nbsp;default&nbsp;if&nbsp;key&nbsp;is&nbsp;not&nbsp;in&nbsp;the&nbsp;dictionary.<br>\n<br>\nReturn&nbsp;the&nbsp;value&nbsp;for&nbsp;key&nbsp;if&nbsp;key&nbsp;is&nbsp;in&nbsp;the&nbsp;dictionary,&nbsp;else&nbsp;default.",
    "dict.update": "D.update([E,&nbsp;]**F)&nbsp;-&gt;&nbsp;None.&nbsp;&nbsp;Update&nbsp;D&nbsp;from&nbsp;dict/iterable&nbsp;E&nbsp;and&nbsp;F.<br>\nIf&nbsp;E&nbsp;is&nbsp;present&nbsp;and&nbsp;has&nbsp;a&nbsp;.keys()&nbsp;method,&nbsp;then&nbsp;does:&nbsp;&nbsp;for&nbsp;k&nbsp;in&nbsp;E:&nbsp;D[k]&nbsp;=&nbsp;E[k]<br>\nIf&nbsp;E&nbsp;is&nbsp;present&nbsp;and&nbsp;lacks&nbsp;a&nbsp;.keys()&nbsp;method,&nbsp;then&nbsp;does:&nbsp;&nbsp;for&nbsp;k,&nbsp;v&nbsp;in&nbsp;E:&nbsp;D[k]&nbsp;=&nbsp;v<br>\nIn&nbsp;either&nbsp;case,&nbsp;this&nbsp;is&nbsp;followed&nbsp;by:&nbsp;for&nbsp;k&nbsp;in&nbsp;F:&nbsp;&nbsp;D[k]&nbsp;=&nbsp;F[k]",
    "dict.values": "D.values()&nbsp;-&gt;&nbsp;an&nbsp;object&nbsp;providing&nbsp;a&nbsp;view&nbsp;on&nbsp;D's&nbsp;values",
    "dir": "dir([object])&nbsp;-&gt;&nbsp;list&nbsp;of&nbsp;strings<br>\n<br>\nIf&nbsp;called&nbsp;without&nbsp;an&nbsp;argument,&nbsp;return&nbsp;the&nbsp;names&nbsp;in&nbsp;the&nbsp;current&nbsp;scope.<br>\nElse,&nbsp;return&nbsp;an&nbsp;alphabetized&nbsp;list&nbsp;of&nbsp;names&nbsp;comprising&nbsp;(some&nbsp;of)&nbsp;the&nbsp;attributes<br>\nof&nbsp;the&nbsp;given&nbsp;object,&nbsp;and&nbsp;of&nbsp;attributes&nbsp;reachable&nbsp;from&nbsp;it.<br>\nIf&nbsp;the&nbsp;object&nbsp;supplies&nbsp;a&nbsp;method&nbsp;named&nbsp;__dir__,&nbsp;it&nbsp;will&nbsp;be&nbsp;used;&nbsp;otherwise<br>\nthe&nbsp;default&nbsp;dir()&nbsp;logic&nbsp;is&nbsp;used&nbsp;and&nbsp;returns:<br>\n&nbsp;&nbsp;for&nbsp;a&nbsp;module&nbsp;object:&nbsp;the&nbsp;module's&nbsp;attributes.<br>\n&nbsp;&nbsp;for&nbsp;a&nbsp;class&nbsp;object:&nbsp;&nbsp;its&nbsp;attributes,&nbsp;and&nbsp;recursively&nbsp;the&nbsp;attributes<br>\n&nbsp;&nbsp;&nbsp;&nbsp;of&nbsp;its&nbsp;bases.<br>\n&nbsp;&nbsp;for&nbsp;any&nbsp;other&nbsp;object:&nbsp;its&nbsp;attributes,&nbsp;its&nbsp;class's&nbsp;attributes,&nbsp;and<br>\n&nbsp;&nbsp;&nbsp;&nbsp;recursively&nbsp;the&nbsp;attributes&nbsp;of&nbsp;its&nbsp;class's&nbsp;base&nbsp;classes.",
    "divmod": "divmod(x,&nbsp;y)<br>\n<br>\nReturn&nbsp;the&nbsp;tuple&nbsp;(x//y,&nbsp;x%y).&nbsp;&nbsp;Invariant:&nbsp;div*y&nbsp;+&nbsp;mod&nbsp;==&nbsp;x.",
    "enumerate": "enumerate(iterable,&nbsp;start=0)<br>\n<br>\nReturn&nbsp;an&nbsp;enumerate&nbsp;object.<br>\n<br>\n&nbsp;&nbsp;iterable<br>\n&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;object&nbsp;supporting&nbsp;iteration<br>\n<br>\nThe&nbsp;enumerate&nbsp;object&nbsp;yields&nbsp;pairs&nbsp;containing&nbsp;a&nbsp;count&nbsp;(from&nbsp;start,&nbsp;which<br>\ndefaults&nbsp;to&nbsp;zero)&nbsp;and&nbsp;a&nbsp;value&nbsp;yielded&nbsp;by&nbsp;the&nbsp;iterable&nbsp;argument.<br>\n<br>\nenumerate&nbsp;is&nbsp;useful&nbsp;for&nbsp;obtaining&nbsp;an&nbsp;indexed&nbsp;list:<br>\n&nbsp;&nbsp;&nbsp;&nbsp;(0,&nbsp;seq[0]),&nbsp;(1,&nbsp;seq[1]),&nbsp;(2,&nbsp;seq[2]),&nbsp;...",
    "eval": "eval(source,&nbsp;globals=None,&nbsp;locals=None)<br>\n<br>\nEvaluate&nbsp;the&nbsp;given&nbsp;source&nbsp;in&nbsp;the&nbsp;context&nbsp;of&nbsp;globals&nbsp;and&nbsp;locals.<br>\n<br>\nThe&nbsp;source&nbsp;may&nbsp;be&nbsp;a&nbsp;string&nbsp;representing&nbsp;a&nbsp;Python&nbsp;expression<br>\nor&nbsp;a&nbsp;code&nbsp;object&nbsp;as&nbsp;returned&nbsp;by&nbsp;compile().<br>\nThe&nbsp;globals&nbsp;must&nbsp;be&nbsp;a&nbsp;dictionary&nbsp;and&nbsp;locals&nbsp;can&nbsp;be&nbsp;any&nbsp;mapping,<br>\ndefaulting&nbsp;to&nbsp;the&nbsp;current&nbsp;globals&nbsp;and&nbsp;locals.<br>\nIf&nbsp;only&nbsp;globals&nbsp;is&nbsp;given,&nbsp;locals&nbsp;defaults&nbsp;to&nbsp;it.",
    "filter": "filter(function&nbsp;or&nbsp;None,&nbsp;iterable)&nbsp;--&gt;&nbsp;filter&nbsp;object<br>\n<br>\nReturn&nbsp;an&nbsp;iterator&nbsp;yielding&nbsp;those&nbsp;items&nbsp;of&nbsp;iterable&nbsp;for&nbsp;which&nbsp;function(item)<br>\nis&nbsp;true.&nbsp;If&nbsp;function&nbsp;is&nbsp;None,&nbsp;return&nbsp;the&nbsp;items&nbsp;that&nbsp;are&nbsp;true.",
    "float": "float(x=0)<br>\n<br>\nConvert&nbsp;a&nbsp;string&nbsp;or&nbsp;number&nbsp;to&nbsp;a&nbsp;floating&nbsp;point&nbsp;number,&nbsp;if&nbsp;possible.",
    "float.as_integer_ratio": "float.as_integer_ratio()<br>\n<br>\nReturn&nbsp;integer&nbsp;ratio.<br>\n<br>\nReturn&nbsp;a&nbsp;pair&nbsp;of&nbsp;integers,&nbsp;whose&nbsp;ratio&nbsp;is&nbsp;exactly&nbsp;equal&nbsp;to&nbsp;the&nbsp;original&nbsp;float<br>\nand&nbsp;with&nbsp;a&nbsp;positive&nbsp;denominator.<br>\n<br>\nRaise&nbsp;OverflowError&nbsp;on&nbsp;infinities&nbsp;and&nbsp;a&nbsp;ValueError&nbsp;on&nbsp;NaNs.<br>\n<br>\n&gt;&gt;&gt;&nbsp;(10.0).as_integer_ratio()<br>\n(10,&nbsp;1)<br>\n&gt;&gt;&gt;&nbsp;(0.0).as_integer_ratio()<br>\n(0,&nbsp;1)<br>\n&gt;&gt;&gt;&nbsp;(-.25).as_integer_ratio()<br>\n(-1,&nbsp;4)",
    "float.fromhex": "float.fromhex($type,&nbsp;string)<br>\n<br>\nCreate&nbsp;a&nbsp;floating-point&nbsp;number&nbsp;from&nbsp;a&nbsp;hexadecimal&nbsp;string.<br>\n<br>\n&gt;&gt;&gt;&nbsp;float.fromhex('0x1.ffffp10')<br>\n2047.984375<br>\n&gt;&gt;&gt;&nbsp;float.fromhex('-0x1p-1074')<br>\n-5e-324",
    "float.hex": "float.hex()<br>\n<br>\nReturn&nbsp;a&nbsp;hexadecimal&nbsp;representation&nbsp;of&nbsp;a&nbsp;floating-point&nbsp;number.<br>\n<br>\n&gt;&gt;&gt;&nbsp;(-0.1).hex()<br>\n'-0x1.999999999999ap-4'<br>\n&gt;&gt;&gt;&nbsp;3.14159.hex()<br>\n'0x1.921f9f01b866ep+1'",
    "float.is_integer": "float.is_integer()<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;the&nbsp;float&nbsp;is&nbsp;an&nbsp;integer.",
    "format": "format(value,&nbsp;format_spec='')<br>\n<br>\nReturn&nbsp;value.__format__(format_spec)<br>\n<br>\nformat_spec&nbsp;defaults&nbsp;to&nbsp;the&nbsp;empty&nbsp;string.<br>\nSee&nbsp;the&nbsp;Format&nbsp;Specification&nbsp;Mini-Language&nbsp;section&nbsp;of&nbsp;help('FORMATTING')&nbsp;for<br>\ndetails.",
    "frozenset": "frozenset()&nbsp;-&gt;&nbsp;empty&nbsp;frozenset&nbsp;object<br>\nfrozenset(iterable)&nbsp;-&gt;&nbsp;frozenset&nbsp;object<br>\n<br>\nBuild&nbsp;an&nbsp;immutable&nbsp;unordered&nbsp;collection&nbsp;of&nbsp;unique&nbsp;elements.",
    "getattr": "getattr(object,&nbsp;name[,&nbsp;default])&nbsp;-&gt;&nbsp;value<br>\n<br>\nGet&nbsp;a&nbsp;named&nbsp;attribute&nbsp;from&nbsp;an&nbsp;object;&nbsp;getattr(x,&nbsp;'y')&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;x.y.<br>\nWhen&nbsp;a&nbsp;default&nbsp;argument&nbsp;is&nbsp;given,&nbsp;it&nbsp;is&nbsp;returned&nbsp;when&nbsp;the&nbsp;attribute&nbsp;doesn't<br>\nexist;&nbsp;without&nbsp;it,&nbsp;an&nbsp;exception&nbsp;is&nbsp;raised&nbsp;in&nbsp;that&nbsp;case.",
    "globals": "globals()<br>\n<br>\nReturn&nbsp;the&nbsp;dictionary&nbsp;containing&nbsp;the&nbsp;current&nbsp;scope's&nbsp;global&nbsp;variables.<br>\n<br>\nNOTE:&nbsp;Updates&nbsp;to&nbsp;this&nbsp;dictionary&nbsp;*will*&nbsp;affect&nbsp;name&nbsp;lookups&nbsp;in&nbsp;the&nbsp;current<br>\nglobal&nbsp;scope&nbsp;and&nbsp;vice-versa.",
    "hasattr": "hasattr(obj,&nbsp;name)<br>\n<br>\nReturn&nbsp;whether&nbsp;the&nbsp;object&nbsp;has&nbsp;an&nbsp;attribute&nbsp;with&nbsp;the&nbsp;given&nbsp;name.<br>\n<br>\nThis&nbsp;is&nbsp;done&nbsp;by&nbsp;calling&nbsp;getattr(obj,&nbsp;name)&nbsp;and&nbsp;catching&nbsp;AttributeError.",
    "hash": "hash(obj)<br>\n<br>\nReturn&nbsp;the&nbsp;hash&nbsp;value&nbsp;for&nbsp;the&nbsp;given&nbsp;object.<br>\n<br>\nTwo&nbsp;objects&nbsp;that&nbsp;compare&nbsp;equal&nbsp;must&nbsp;also&nbsp;have&nbsp;the&nbsp;same&nbsp;hash&nbsp;value,&nbsp;but&nbsp;the<br>\nreverse&nbsp;is&nbsp;not&nbsp;necessarily&nbsp;true.",
    "hex": "hex(number)<br>\n<br>\nReturn&nbsp;the&nbsp;hexadecimal&nbsp;representation&nbsp;of&nbsp;an&nbsp;integer.<br>\n<br>\n&nbsp;&nbsp;&nbsp;&gt;&gt;&gt;&nbsp;hex(12648430)<br>\n&nbsp;&nbsp;&nbsp;'0xc0ffee'",
    "id": "id(obj)<br>\n<br>\nReturn&nbsp;the&nbsp;identity&nbsp;of&nbsp;an&nbsp;object.<br>\n<br>\nThis&nbsp;is&nbsp;guaranteed&nbsp;to&nbsp;be&nbsp;unique&nbsp;among&nbsp;simultaneously&nbsp;existing&nbsp;objects.<br>\n(CPython&nbsp;uses&nbsp;the&nbsp;object's&nbsp;memory&nbsp;address.)",
    "int": "int([x])&nbsp;-&gt;&nbsp;integer<br>\nint(x,&nbsp;base=10)&nbsp;-&gt;&nbsp;integer<br>\n<br>\nConvert&nbsp;a&nbsp;number&nbsp;or&nbsp;string&nbsp;to&nbsp;an&nbsp;integer,&nbsp;or&nbsp;return&nbsp;0&nbsp;if&nbsp;no&nbsp;arguments<br>\nare&nbsp;given.&nbsp;&nbsp;If&nbsp;x&nbsp;is&nbsp;a&nbsp;number,&nbsp;return&nbsp;x.__int__().&nbsp;&nbsp;For&nbsp;floating&nbsp;point<br>\nnumbers,&nbsp;this&nbsp;truncates&nbsp;towards&nbsp;zero.<br>\n<br>\nIf&nbsp;x&nbsp;is&nbsp;not&nbsp;a&nbsp;number&nbsp;or&nbsp;if&nbsp;base&nbsp;is&nbsp;given,&nbsp;then&nbsp;x&nbsp;must&nbsp;be&nbsp;a&nbsp;string,<br>\nbytes,&nbsp;or&nbsp;bytearray&nbsp;instance&nbsp;representing&nbsp;an&nbsp;integer&nbsp;literal&nbsp;in&nbsp;the<br>\ngiven&nbsp;base.&nbsp;&nbsp;The&nbsp;literal&nbsp;can&nbsp;be&nbsp;preceded&nbsp;by&nbsp;'+'&nbsp;or&nbsp;'-'&nbsp;and&nbsp;be&nbsp;surrounded<br>\nby&nbsp;whitespace.&nbsp;&nbsp;The&nbsp;base&nbsp;defaults&nbsp;to&nbsp;10.&nbsp;&nbsp;Valid&nbsp;bases&nbsp;are&nbsp;0&nbsp;and&nbsp;2-36.<br>\nBase&nbsp;0&nbsp;means&nbsp;to&nbsp;interpret&nbsp;the&nbsp;base&nbsp;from&nbsp;the&nbsp;string&nbsp;as&nbsp;an&nbsp;integer&nbsp;literal.<br>\n&gt;&gt;&gt;&nbsp;int('0b100',&nbsp;base=0)<br>\n4",
    "int.bit_length": "int.bit_length()<br>\n<br>\nNumber&nbsp;of&nbsp;bits&nbsp;necessary&nbsp;to&nbsp;represent&nbsp;self&nbsp;in&nbsp;binary.<br>\n<br>\n&gt;&gt;&gt;&nbsp;bin(37)<br>\n'0b100101'<br>\n&gt;&gt;&gt;&nbsp;(37).bit_length()<br>\n6",
    "int.from_bytes": "int.from_bytes($type,&nbsp;/,&nbsp;bytes,&nbsp;byteorder,&nbsp;*,&nbsp;signed=False)<br>\n<br>\nReturn&nbsp;the&nbsp;integer&nbsp;represented&nbsp;by&nbsp;the&nbsp;given&nbsp;array&nbsp;of&nbsp;bytes.<br>\n<br>\n&nbsp;&nbsp;bytes<br>\n&nbsp;&nbsp;&nbsp;&nbsp;Holds&nbsp;the&nbsp;array&nbsp;of&nbsp;bytes&nbsp;to&nbsp;convert.&nbsp;&nbsp;The&nbsp;argument&nbsp;must&nbsp;either<br>\n&nbsp;&nbsp;&nbsp;&nbsp;support&nbsp;the&nbsp;buffer&nbsp;protocol&nbsp;or&nbsp;be&nbsp;an&nbsp;iterable&nbsp;object&nbsp;producing&nbsp;bytes.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;Bytes&nbsp;and&nbsp;bytearray&nbsp;are&nbsp;examples&nbsp;of&nbsp;built-in&nbsp;objects&nbsp;that&nbsp;support&nbsp;the<br>\n&nbsp;&nbsp;&nbsp;&nbsp;buffer&nbsp;protocol.<br>\n&nbsp;&nbsp;byteorder<br>\n&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;byte&nbsp;order&nbsp;used&nbsp;to&nbsp;represent&nbsp;the&nbsp;integer.&nbsp;&nbsp;If&nbsp;byteorder&nbsp;is&nbsp;'big',<br>\n&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;most&nbsp;significant&nbsp;byte&nbsp;is&nbsp;at&nbsp;the&nbsp;beginning&nbsp;of&nbsp;the&nbsp;byte&nbsp;array.&nbsp;&nbsp;If<br>\n&nbsp;&nbsp;&nbsp;&nbsp;byteorder&nbsp;is&nbsp;'little',&nbsp;the&nbsp;most&nbsp;significant&nbsp;byte&nbsp;is&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;the<br>\n&nbsp;&nbsp;&nbsp;&nbsp;byte&nbsp;array.&nbsp;&nbsp;To&nbsp;request&nbsp;the&nbsp;native&nbsp;byte&nbsp;order&nbsp;of&nbsp;the&nbsp;host&nbsp;system,&nbsp;use<br>\n&nbsp;&nbsp;&nbsp;&nbsp;`sys.byteorder'&nbsp;as&nbsp;the&nbsp;byte&nbsp;order&nbsp;value.<br>\n&nbsp;&nbsp;signed<br>\n&nbsp;&nbsp;&nbsp;&nbsp;Indicates&nbsp;whether&nbsp;two's&nbsp;complement&nbsp;is&nbsp;used&nbsp;to&nbsp;represent&nbsp;the&nbsp;integer.",
    "int.to_bytes": "int.to_bytes(length,&nbsp;byteorder,&nbsp;*,&nbsp;signed=False)<br>\n<br>\nReturn&nbsp;an&nbsp;array&nbsp;of&nbsp;bytes&nbsp;representing&nbsp;an&nbsp;integer.<br>\n<br>\n&nbsp;&nbsp;length<br>\n&nbsp;&nbsp;&nbsp;&nbsp;Length&nbsp;of&nbsp;bytes&nbsp;object&nbsp;to&nbsp;use.&nbsp;&nbsp;An&nbsp;OverflowError&nbsp;is&nbsp;raised&nbsp;if&nbsp;the<br>\n&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;is&nbsp;not&nbsp;representable&nbsp;with&nbsp;the&nbsp;given&nbsp;number&nbsp;of&nbsp;bytes.<br>\n&nbsp;&nbsp;byteorder<br>\n&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;byte&nbsp;order&nbsp;used&nbsp;to&nbsp;represent&nbsp;the&nbsp;integer.&nbsp;&nbsp;If&nbsp;byteorder&nbsp;is&nbsp;'big',<br>\n&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;most&nbsp;significant&nbsp;byte&nbsp;is&nbsp;at&nbsp;the&nbsp;beginning&nbsp;of&nbsp;the&nbsp;byte&nbsp;array.&nbsp;&nbsp;If<br>\n&nbsp;&nbsp;&nbsp;&nbsp;byteorder&nbsp;is&nbsp;'little',&nbsp;the&nbsp;most&nbsp;significant&nbsp;byte&nbsp;is&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;the<br>\n&nbsp;&nbsp;&nbsp;&nbsp;byte&nbsp;array.&nbsp;&nbsp;To&nbsp;request&nbsp;the&nbsp;native&nbsp;byte&nbsp;order&nbsp;of&nbsp;the&nbsp;host&nbsp;system,&nbsp;use<br>\n&nbsp;&nbsp;&nbsp;&nbsp;`sys.byteorder'&nbsp;as&nbsp;the&nbsp;byte&nbsp;order&nbsp;value.<br>\n&nbsp;&nbsp;signed<br>\n&nbsp;&nbsp;&nbsp;&nbsp;Determines&nbsp;whether&nbsp;two's&nbsp;complement&nbsp;is&nbsp;used&nbsp;to&nbsp;represent&nbsp;the&nbsp;integer.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;If&nbsp;signed&nbsp;is&nbsp;False&nbsp;and&nbsp;a&nbsp;negative&nbsp;integer&nbsp;is&nbsp;given,&nbsp;an&nbsp;OverflowError<br>\n&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;raised.",
    "isinstance": "isinstance(obj,&nbsp;class_or_tuple)<br>\n<br>\nReturn&nbsp;whether&nbsp;an&nbsp;object&nbsp;is&nbsp;an&nbsp;instance&nbsp;of&nbsp;a&nbsp;class&nbsp;or&nbsp;of&nbsp;a&nbsp;subclass&nbsp;thereof.<br>\n<br>\nA&nbsp;tuple,&nbsp;as&nbsp;in&nbsp;``isinstance(x,&nbsp;(A,&nbsp;B,&nbsp;...))``,&nbsp;may&nbsp;be&nbsp;given&nbsp;as&nbsp;the&nbsp;target&nbsp;to<br>\ncheck&nbsp;against.&nbsp;This&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;``isinstance(x,&nbsp;A)&nbsp;or&nbsp;isinstance(x,&nbsp;B)<br>\nor&nbsp;...``&nbsp;etc.",
    "issubclass": "issubclass(cls,&nbsp;class_or_tuple)<br>\n<br>\nReturn&nbsp;whether&nbsp;'cls'&nbsp;is&nbsp;a&nbsp;derived&nbsp;from&nbsp;another&nbsp;class&nbsp;or&nbsp;is&nbsp;the&nbsp;same&nbsp;class.<br>\n<br>\nA&nbsp;tuple,&nbsp;as&nbsp;in&nbsp;``issubclass(x,&nbsp;(A,&nbsp;B,&nbsp;...))``,&nbsp;may&nbsp;be&nbsp;given&nbsp;as&nbsp;the&nbsp;target&nbsp;to<br>\ncheck&nbsp;against.&nbsp;This&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;``issubclass(x,&nbsp;A)&nbsp;or&nbsp;issubclass(x,&nbsp;B)<br>\nor&nbsp;...``&nbsp;etc.",
    "len": "len(obj)<br>\n<br>\nReturn&nbsp;the&nbsp;number&nbsp;of&nbsp;items&nbsp;in&nbsp;a&nbsp;container.",
    "list": "list(iterable=())<br>\n<br>\nBuilt-in&nbsp;mutable&nbsp;sequence.<br>\n<br>\nIf&nbsp;no&nbsp;argument&nbsp;is&nbsp;given,&nbsp;the&nbsp;constructor&nbsp;creates&nbsp;a&nbsp;new&nbsp;empty&nbsp;list.<br>\nThe&nbsp;argument&nbsp;must&nbsp;be&nbsp;an&nbsp;iterable&nbsp;if&nbsp;specified.",
    "list.sort": "list.sort(*,&nbsp;key=None,&nbsp;reverse=False)<br>\n<br>\nStable&nbsp;sort&nbsp;*IN&nbsp;PLACE*.",
    "locals": "locals()<br>\n<br>\nReturn&nbsp;a&nbsp;dictionary&nbsp;containing&nbsp;the&nbsp;current&nbsp;scope's&nbsp;local&nbsp;variables.<br>\n<br>\nNOTE:&nbsp;Whether&nbsp;or&nbsp;not&nbsp;updates&nbsp;to&nbsp;this&nbsp;dictionary&nbsp;will&nbsp;affect&nbsp;name&nbsp;lookups&nbsp;in<br>\nthe&nbsp;local&nbsp;scope&nbsp;and&nbsp;vice-versa&nbsp;is&nbsp;*implementation&nbsp;dependent*&nbsp;and&nbsp;not<br>\ncovered&nbsp;by&nbsp;any&nbsp;backwards&nbsp;compatibility&nbsp;guarantees.",
    "map": "map(func,&nbsp;*iterables)&nbsp;--&gt;&nbsp;map&nbsp;object<br>\n<br>\nMake&nbsp;an&nbsp;iterator&nbsp;that&nbsp;computes&nbsp;the&nbsp;function&nbsp;using&nbsp;arguments&nbsp;from<br>\neach&nbsp;of&nbsp;the&nbsp;iterables.&nbsp;&nbsp;Stops&nbsp;when&nbsp;the&nbsp;shortest&nbsp;iterable&nbsp;is&nbsp;exhausted.",
    "math.acos": "math.acos(x)<br>\n<br>\nReturn&nbsp;the&nbsp;arc&nbsp;cosine&nbsp;(measured&nbsp;in&nbsp;radians)&nbsp;of&nbsp;x.",
    "math.acosh": "math.acosh(x)<br>\n<br>\nReturn&nbsp;the&nbsp;inverse&nbsp;hyperbolic&nbsp;cosine&nbsp;of&nbsp;x.",
    "math.asin": "math.asin(x)<br>\n<br>\nReturn&nbsp;the&nbsp;arc&nbsp;sine&nbsp;(measured&nbsp;in&nbsp;radians)&nbsp;of&nbsp;x.",
    "math.asinh": "math.asinh(x)<br>\n<br>\nReturn&nbsp;the&nbsp;inverse&nbsp;hyperbolic&nbsp;sine&nbsp;of&nbsp;x.",
    "math.atan": "math.atan(x)<br>\n<br>\nReturn&nbsp;the&nbsp;arc&nbsp;tangent&nbsp;(measured&nbsp;in&nbsp;radians)&nbsp;of&nbsp;x.",
    "math.atan2": "math.atan2(y,&nbsp;x)<br>\n<br>\nReturn&nbsp;the&nbsp;arc&nbsp;tangent&nbsp;(measured&nbsp;in&nbsp;radians)&nbsp;of&nbsp;y/x.<br>\n<br>\nUnlike&nbsp;atan(y/x),&nbsp;the&nbsp;signs&nbsp;of&nbsp;both&nbsp;x&nbsp;and&nbsp;y&nbsp;are&nbsp;considered.",
    "math.atanh": "math.atanh(x)<br>\n<br>\nReturn&nbsp;the&nbsp;inverse&nbsp;hyperbolic&nbsp;tangent&nbsp;of&nbsp;x.",
    "math.ceil": "math.ceil(x)<br>\n<br>\nReturn&nbsp;the&nbsp;ceiling&nbsp;of&nbsp;x&nbsp;as&nbsp;an&nbsp;Integral.<br>\n<br>\nThis&nbsp;is&nbsp;the&nbsp;smallest&nbsp;integer&nbsp;&gt;=&nbsp;x.",
    "math.copysign": "math.copysign(x,&nbsp;y)<br>\n<br>\nReturn&nbsp;a&nbsp;float&nbsp;with&nbsp;the&nbsp;magnitude&nbsp;(absolute&nbsp;value)&nbsp;of&nbsp;x&nbsp;but&nbsp;the&nbsp;sign&nbsp;of&nbsp;y.<br>\n<br>\nOn&nbsp;platforms&nbsp;that&nbsp;support&nbsp;signed&nbsp;zeros,&nbsp;copysign(1.0,&nbsp;-0.0)<br>\nreturns&nbsp;-1.0.<br>\n",
    "math.cos": "math.cos(x)<br>\n<br>\nReturn&nbsp;the&nbsp;cosine&nbsp;of&nbsp;x&nbsp;(measured&nbsp;in&nbsp;radians).",
    "math.cosh": "math.cosh(x)<br>\n<br>\nReturn&nbsp;the&nbsp;hyperbolic&nbsp;cosine&nbsp;of&nbsp;x.",
    "math.degrees": "math.degrees(x)<br>\n<br>\nConvert&nbsp;angle&nbsp;x&nbsp;from&nbsp;radians&nbsp;to&nbsp;degrees.",
    "math.erf": "math.erf(x)<br>\n<br>\nError&nbsp;function&nbsp;at&nbsp;x.",
    "math.erfc": "math.erfc(x)<br>\n<br>\nComplementary&nbsp;error&nbsp;function&nbsp;at&nbsp;x.",
    "math.exp": "math.exp(x)<br>\n<br>\nReturn&nbsp;e&nbsp;raised&nbsp;to&nbsp;the&nbsp;power&nbsp;of&nbsp;x.",
    "math.expm1": "math.expm1(x)<br>\n<br>\nReturn&nbsp;exp(x)-1.<br>\n<br>\nThis&nbsp;function&nbsp;avoids&nbsp;the&nbsp;loss&nbsp;of&nbsp;precision&nbsp;involved&nbsp;in&nbsp;the&nbsp;direct&nbsp;evaluation&nbsp;of&nbsp;exp(x)-1&nbsp;for&nbsp;small&nbsp;x.",
    "math.fabs": "math.fabs(x)<br>\n<br>\nReturn&nbsp;the&nbsp;absolute&nbsp;value&nbsp;of&nbsp;the&nbsp;float&nbsp;x.",
    "math.factorial": "math.factorial(x)<br>\n<br>\nFind&nbsp;x!.<br>\n<br>\nRaise&nbsp;a&nbsp;ValueError&nbsp;if&nbsp;x&nbsp;is&nbsp;negative&nbsp;or&nbsp;non-integral.",
    "math.floor": "math.floor(x)<br>\n<br>\nReturn&nbsp;the&nbsp;floor&nbsp;of&nbsp;x&nbsp;as&nbsp;an&nbsp;Integral.<br>\n<br>\nThis&nbsp;is&nbsp;the&nbsp;largest&nbsp;integer&nbsp;&lt;=&nbsp;x.",
    "math.fmod": "math.fmod(x,&nbsp;y)<br>\n<br>\nReturn&nbsp;fmod(x,&nbsp;y),&nbsp;according&nbsp;to&nbsp;platform&nbsp;C.<br>\n<br>\nx&nbsp;%&nbsp;y&nbsp;may&nbsp;differ.",
    "math.frexp": "math.frexp(x)<br>\n<br>\nReturn&nbsp;the&nbsp;mantissa&nbsp;and&nbsp;exponent&nbsp;of&nbsp;x,&nbsp;as&nbsp;pair&nbsp;(m,&nbsp;e).<br>\n<br>\nm&nbsp;is&nbsp;a&nbsp;float&nbsp;and&nbsp;e&nbsp;is&nbsp;an&nbsp;int,&nbsp;such&nbsp;that&nbsp;x&nbsp;=&nbsp;m&nbsp;*&nbsp;2.**e.<br>\nIf&nbsp;x&nbsp;is&nbsp;0,&nbsp;m&nbsp;and&nbsp;e&nbsp;are&nbsp;both&nbsp;0.&nbsp;&nbsp;Else&nbsp;0.5&nbsp;&lt;=&nbsp;abs(m)&nbsp;&lt;&nbsp;1.0.",
    "math.fsum": "math.fsum(seq)<br>\n<br>\nReturn&nbsp;an&nbsp;accurate&nbsp;floating&nbsp;point&nbsp;sum&nbsp;of&nbsp;values&nbsp;in&nbsp;the&nbsp;iterable&nbsp;seq.<br>\n<br>\nAssumes&nbsp;IEEE-754&nbsp;floating&nbsp;point&nbsp;arithmetic.",
    "math.gamma": "math.gamma(x)<br>\n<br>\nGamma&nbsp;function&nbsp;at&nbsp;x.",
    "math.gcd": "math.gcd(x,&nbsp;y)<br>\n<br>\ngreatest&nbsp;common&nbsp;divisor&nbsp;of&nbsp;x&nbsp;and&nbsp;y",
    "math.hypot": "math.hypot(x,&nbsp;y)<br>\n<br>\nReturn&nbsp;the&nbsp;Euclidean&nbsp;distance,&nbsp;sqrt(x*x&nbsp;+&nbsp;y*y).",
    "math.isclose": "math.isclose(a,&nbsp;b,&nbsp;*,&nbsp;rel_tol=1e-09,&nbsp;abs_tol=0.0)<br>\n<br>\nDetermine&nbsp;whether&nbsp;two&nbsp;floating&nbsp;point&nbsp;numbers&nbsp;are&nbsp;close&nbsp;in&nbsp;value.<br>\n<br>\n&nbsp;&nbsp;rel_tol<br>\n&nbsp;&nbsp;&nbsp;&nbsp;maximum&nbsp;difference&nbsp;for&nbsp;being&nbsp;considered&nbsp;&quot;close&quot;,&nbsp;relative&nbsp;to&nbsp;the<br>\n&nbsp;&nbsp;&nbsp;&nbsp;magnitude&nbsp;of&nbsp;the&nbsp;input&nbsp;values<br>\n&nbsp;&nbsp;abs_tol<br>\n&nbsp;&nbsp;&nbsp;&nbsp;maximum&nbsp;difference&nbsp;for&nbsp;being&nbsp;considered&nbsp;&quot;close&quot;,&nbsp;regardless&nbsp;of&nbsp;the<br>\n&nbsp;&nbsp;&nbsp;&nbsp;magnitude&nbsp;of&nbsp;the&nbsp;input&nbsp;values<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;a&nbsp;is&nbsp;close&nbsp;in&nbsp;value&nbsp;to&nbsp;b,&nbsp;and&nbsp;False&nbsp;otherwise.<br>\n<br>\nFor&nbsp;the&nbsp;values&nbsp;to&nbsp;be&nbsp;considered&nbsp;close,&nbsp;the&nbsp;difference&nbsp;between&nbsp;them<br>\nmust&nbsp;be&nbsp;smaller&nbsp;than&nbsp;at&nbsp;least&nbsp;one&nbsp;of&nbsp;the&nbsp;tolerances.<br>\n<br>\n-inf,&nbsp;inf&nbsp;and&nbsp;NaN&nbsp;behave&nbsp;similarly&nbsp;to&nbsp;the&nbsp;IEEE&nbsp;754&nbsp;Standard.&nbsp;&nbsp;That<br>\nis,&nbsp;NaN&nbsp;is&nbsp;not&nbsp;close&nbsp;to&nbsp;anything,&nbsp;even&nbsp;itself.&nbsp;&nbsp;inf&nbsp;and&nbsp;-inf&nbsp;are<br>\nonly&nbsp;close&nbsp;to&nbsp;themselves.",
    "math.isfinite": "math.isfinite(x)<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;x&nbsp;is&nbsp;neither&nbsp;an&nbsp;infinity&nbsp;nor&nbsp;a&nbsp;NaN,&nbsp;and&nbsp;False&nbsp;otherwise.",
    "math.isinf": "math.isinf(x)<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;x&nbsp;is&nbsp;a&nbsp;positive&nbsp;or&nbsp;negative&nbsp;infinity,&nbsp;and&nbsp;False&nbsp;otherwise.",
    "math.isnan": "math.isnan(x)<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;x&nbsp;is&nbsp;a&nbsp;NaN&nbsp;(not&nbsp;a&nbsp;number),&nbsp;and&nbsp;False&nbsp;otherwise.",
    "math.ldexp": "math.ldexp(x,&nbsp;i)<br>\n<br>\nReturn&nbsp;x&nbsp;*&nbsp;(2**i).<br>\n<br>\nThis&nbsp;is&nbsp;essentially&nbsp;the&nbsp;inverse&nbsp;of&nbsp;frexp().",
    "math.lgamma": "math.lgamma(x)<br>\n<br>\nNatural&nbsp;logarithm&nbsp;of&nbsp;absolute&nbsp;value&nbsp;of&nbsp;Gamma&nbsp;function&nbsp;at&nbsp;x.",
    "math.log": "log(x,&nbsp;[base=math.e])<br>\nReturn&nbsp;the&nbsp;logarithm&nbsp;of&nbsp;x&nbsp;to&nbsp;the&nbsp;given&nbsp;base.<br>\n<br>\nIf&nbsp;the&nbsp;base&nbsp;not&nbsp;specified,&nbsp;returns&nbsp;the&nbsp;natural&nbsp;logarithm&nbsp;(base&nbsp;e)&nbsp;of&nbsp;x.",
    "math.log10": "math.log10(x)<br>\n<br>\nReturn&nbsp;the&nbsp;base&nbsp;10&nbsp;logarithm&nbsp;of&nbsp;x.",
    "math.log1p": "math.log1p(x)<br>\n<br>\nReturn&nbsp;the&nbsp;natural&nbsp;logarithm&nbsp;of&nbsp;1+x&nbsp;(base&nbsp;e).<br>\n<br>\nThe&nbsp;result&nbsp;is&nbsp;computed&nbsp;in&nbsp;a&nbsp;way&nbsp;which&nbsp;is&nbsp;accurate&nbsp;for&nbsp;x&nbsp;near&nbsp;zero.",
    "math.log2": "math.log2(x)<br>\n<br>\nReturn&nbsp;the&nbsp;base&nbsp;2&nbsp;logarithm&nbsp;of&nbsp;x.",
    "math.modf": "math.modf(x)<br>\n<br>\nReturn&nbsp;the&nbsp;fractional&nbsp;and&nbsp;integer&nbsp;parts&nbsp;of&nbsp;x.<br>\n<br>\nBoth&nbsp;results&nbsp;carry&nbsp;the&nbsp;sign&nbsp;of&nbsp;x&nbsp;and&nbsp;are&nbsp;floats.",
    "math.pow": "math.pow(x,&nbsp;y)<br>\n<br>\nReturn&nbsp;x**y&nbsp;(x&nbsp;to&nbsp;the&nbsp;power&nbsp;of&nbsp;y).",
    "math.radians": "math.radians(x)<br>\n<br>\nConvert&nbsp;angle&nbsp;x&nbsp;from&nbsp;degrees&nbsp;to&nbsp;radians.",
    "math.remainder": "math.remainder(x,&nbsp;y)<br>\n<br>\nDifference&nbsp;between&nbsp;x&nbsp;and&nbsp;the&nbsp;closest&nbsp;integer&nbsp;multiple&nbsp;of&nbsp;y.<br>\n<br>\nReturn&nbsp;x&nbsp;-&nbsp;n*y&nbsp;where&nbsp;n*y&nbsp;is&nbsp;the&nbsp;closest&nbsp;integer&nbsp;multiple&nbsp;of&nbsp;y.<br>\nIn&nbsp;the&nbsp;case&nbsp;where&nbsp;x&nbsp;is&nbsp;exactly&nbsp;halfway&nbsp;between&nbsp;two&nbsp;multiples&nbsp;of<br>\ny,&nbsp;the&nbsp;nearest&nbsp;even&nbsp;value&nbsp;of&nbsp;n&nbsp;is&nbsp;used.&nbsp;The&nbsp;result&nbsp;is&nbsp;always&nbsp;exact.",
    "math.sin": "math.sin(x)<br>\n<br>\nReturn&nbsp;the&nbsp;sine&nbsp;of&nbsp;x&nbsp;(measured&nbsp;in&nbsp;radians).",
    "math.sinh": "math.sinh(x)<br>\n<br>\nReturn&nbsp;the&nbsp;hyperbolic&nbsp;sine&nbsp;of&nbsp;x.",
    "math.sqrt": "math.sqrt(x)<br>\n<br>\nReturn&nbsp;the&nbsp;square&nbsp;root&nbsp;of&nbsp;x.",
    "math.tan": "math.tan(x)<br>\n<br>\nReturn&nbsp;the&nbsp;tangent&nbsp;of&nbsp;x&nbsp;(measured&nbsp;in&nbsp;radians).",
    "math.tanh": "math.tanh(x)<br>\n<br>\nReturn&nbsp;the&nbsp;hyperbolic&nbsp;tangent&nbsp;of&nbsp;x.",
    "math.trunc": "math.trunc(x)<br>\n<br>\nTruncates&nbsp;the&nbsp;Real&nbsp;x&nbsp;to&nbsp;the&nbsp;nearest&nbsp;Integral&nbsp;toward&nbsp;0.<br>\n<br>\nUses&nbsp;the&nbsp;__trunc__&nbsp;magic&nbsp;method.",
    "max": "max(iterable,&nbsp;*[,&nbsp;default=obj,&nbsp;key=func])&nbsp;-&gt;&nbsp;value<br>\nmax(arg1,&nbsp;arg2,&nbsp;*args,&nbsp;*[,&nbsp;key=func])&nbsp;-&gt;&nbsp;value<br>\n<br>\nWith&nbsp;a&nbsp;single&nbsp;iterable&nbsp;argument,&nbsp;return&nbsp;its&nbsp;biggest&nbsp;item.&nbsp;The<br>\ndefault&nbsp;keyword-only&nbsp;argument&nbsp;specifies&nbsp;an&nbsp;object&nbsp;to&nbsp;return&nbsp;if<br>\nthe&nbsp;provided&nbsp;iterable&nbsp;is&nbsp;empty.<br>\nWith&nbsp;two&nbsp;or&nbsp;more&nbsp;arguments,&nbsp;return&nbsp;the&nbsp;largest&nbsp;argument.",
    "min": "min(iterable,&nbsp;*[,&nbsp;default=obj,&nbsp;key=func])&nbsp;-&gt;&nbsp;value<br>\nmin(arg1,&nbsp;arg2,&nbsp;*args,&nbsp;*[,&nbsp;key=func])&nbsp;-&gt;&nbsp;value<br>\n<br>\nWith&nbsp;a&nbsp;single&nbsp;iterable&nbsp;argument,&nbsp;return&nbsp;its&nbsp;smallest&nbsp;item.&nbsp;The<br>\ndefault&nbsp;keyword-only&nbsp;argument&nbsp;specifies&nbsp;an&nbsp;object&nbsp;to&nbsp;return&nbsp;if<br>\nthe&nbsp;provided&nbsp;iterable&nbsp;is&nbsp;empty.<br>\nWith&nbsp;two&nbsp;or&nbsp;more&nbsp;arguments,&nbsp;return&nbsp;the&nbsp;smallest&nbsp;argument.",
    "next": "next(iterator[,&nbsp;default])<br>\n<br>\nReturn&nbsp;the&nbsp;next&nbsp;item&nbsp;from&nbsp;the&nbsp;iterator.&nbsp;If&nbsp;default&nbsp;is&nbsp;given&nbsp;and&nbsp;the&nbsp;iterator<br>\nis&nbsp;exhausted,&nbsp;it&nbsp;is&nbsp;returned&nbsp;instead&nbsp;of&nbsp;raising&nbsp;StopIteration.",
    "oct": "oct(number)<br>\n<br>\nReturn&nbsp;the&nbsp;octal&nbsp;representation&nbsp;of&nbsp;an&nbsp;integer.<br>\n<br>\n&nbsp;&nbsp;&nbsp;&gt;&gt;&gt;&nbsp;oct(342391)<br>\n&nbsp;&nbsp;&nbsp;'0o1234567'",
    "open": "open(file,&nbsp;mode='r',&nbsp;buffering=-1,&nbsp;encoding=None,<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errors=None,&nbsp;newline=None,&nbsp;closefd=True,&nbsp;opener=None)<br>\n<br>\nOpen&nbsp;file&nbsp;and&nbsp;return&nbsp;a&nbsp;stream.&nbsp;&nbsp;Raise&nbsp;OSError&nbsp;upon&nbsp;failure.<br>\n<br>\nfile&nbsp;is&nbsp;either&nbsp;a&nbsp;text&nbsp;or&nbsp;byte&nbsp;string&nbsp;giving&nbsp;the&nbsp;name&nbsp;(and&nbsp;the&nbsp;path<br>\nif&nbsp;the&nbsp;file&nbsp;isn't&nbsp;in&nbsp;the&nbsp;current&nbsp;working&nbsp;directory)&nbsp;of&nbsp;the&nbsp;file&nbsp;to<br>\nbe&nbsp;opened&nbsp;or&nbsp;an&nbsp;integer&nbsp;file&nbsp;descriptor&nbsp;of&nbsp;the&nbsp;file&nbsp;to&nbsp;be<br>\nwrapped.&nbsp;(If&nbsp;a&nbsp;file&nbsp;descriptor&nbsp;is&nbsp;given,&nbsp;it&nbsp;is&nbsp;closed&nbsp;when&nbsp;the<br>\nreturned&nbsp;I/O&nbsp;object&nbsp;is&nbsp;closed,&nbsp;unless&nbsp;closefd&nbsp;is&nbsp;set&nbsp;to&nbsp;False.)<br>\n<br>\nmode&nbsp;is&nbsp;an&nbsp;optional&nbsp;string&nbsp;that&nbsp;specifies&nbsp;the&nbsp;mode&nbsp;in&nbsp;which&nbsp;the&nbsp;file<br>\nis&nbsp;opened.&nbsp;It&nbsp;defaults&nbsp;to&nbsp;'r'&nbsp;which&nbsp;means&nbsp;open&nbsp;for&nbsp;reading&nbsp;in&nbsp;text<br>\nmode.&nbsp;&nbsp;Other&nbsp;common&nbsp;values&nbsp;are&nbsp;'w'&nbsp;for&nbsp;writing&nbsp;(truncating&nbsp;the&nbsp;file&nbsp;if<br>\nit&nbsp;already&nbsp;exists),&nbsp;'x'&nbsp;for&nbsp;creating&nbsp;and&nbsp;writing&nbsp;to&nbsp;a&nbsp;new&nbsp;file,&nbsp;and<br>\n'a'&nbsp;for&nbsp;appending&nbsp;(which&nbsp;on&nbsp;some&nbsp;Unix&nbsp;systems,&nbsp;means&nbsp;that&nbsp;all&nbsp;writes<br>\nappend&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;file&nbsp;regardless&nbsp;of&nbsp;the&nbsp;current&nbsp;seek&nbsp;position).<br>\nIn&nbsp;text&nbsp;mode,&nbsp;if&nbsp;encoding&nbsp;is&nbsp;not&nbsp;specified&nbsp;the&nbsp;encoding&nbsp;used&nbsp;is&nbsp;platform<br>\ndependent:&nbsp;locale.getpreferredencoding(False)&nbsp;is&nbsp;called&nbsp;to&nbsp;get&nbsp;the<br>\ncurrent&nbsp;locale&nbsp;encoding.&nbsp;(For&nbsp;reading&nbsp;and&nbsp;writing&nbsp;raw&nbsp;bytes&nbsp;use&nbsp;binary<br>\nmode&nbsp;and&nbsp;leave&nbsp;encoding&nbsp;unspecified.)&nbsp;The&nbsp;available&nbsp;modes&nbsp;are:<br>\n<br>\n=========&nbsp;===============================================================<br>\nCharacter&nbsp;Meaning<br>\n---------&nbsp;---------------------------------------------------------------<br>\n'r'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;open&nbsp;for&nbsp;reading&nbsp;(default)<br>\n'w'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;open&nbsp;for&nbsp;writing,&nbsp;truncating&nbsp;the&nbsp;file&nbsp;first<br>\n'x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;create&nbsp;a&nbsp;new&nbsp;file&nbsp;and&nbsp;open&nbsp;it&nbsp;for&nbsp;writing<br>\n'a'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;open&nbsp;for&nbsp;writing,&nbsp;appending&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;file&nbsp;if&nbsp;it&nbsp;exists<br>\n'b'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binary&nbsp;mode<br>\n't'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text&nbsp;mode&nbsp;(default)<br>\n'+'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;open&nbsp;a&nbsp;disk&nbsp;file&nbsp;for&nbsp;updating&nbsp;(reading&nbsp;and&nbsp;writing)<br>\n'U'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;universal&nbsp;newline&nbsp;mode&nbsp;(deprecated)<br>\n=========&nbsp;===============================================================<br>\n<br>\nThe&nbsp;default&nbsp;mode&nbsp;is&nbsp;'rt'&nbsp;(open&nbsp;for&nbsp;reading&nbsp;text).&nbsp;For&nbsp;binary&nbsp;random<br>\naccess,&nbsp;the&nbsp;mode&nbsp;'w+b'&nbsp;opens&nbsp;and&nbsp;truncates&nbsp;the&nbsp;file&nbsp;to&nbsp;0&nbsp;bytes,&nbsp;while<br>\n'r+b'&nbsp;opens&nbsp;the&nbsp;file&nbsp;without&nbsp;truncation.&nbsp;The&nbsp;'x'&nbsp;mode&nbsp;implies&nbsp;'w'&nbsp;and<br>\nraises&nbsp;an&nbsp;`FileExistsError`&nbsp;if&nbsp;the&nbsp;file&nbsp;already&nbsp;exists.<br>\n<br>\nPython&nbsp;distinguishes&nbsp;between&nbsp;files&nbsp;opened&nbsp;in&nbsp;binary&nbsp;and&nbsp;text&nbsp;modes,<br>\neven&nbsp;when&nbsp;the&nbsp;underlying&nbsp;operating&nbsp;system&nbsp;doesn't.&nbsp;Files&nbsp;opened&nbsp;in<br>\nbinary&nbsp;mode&nbsp;(appending&nbsp;'b'&nbsp;to&nbsp;the&nbsp;mode&nbsp;argument)&nbsp;return&nbsp;contents&nbsp;as<br>\nbytes&nbsp;objects&nbsp;without&nbsp;any&nbsp;decoding.&nbsp;In&nbsp;text&nbsp;mode&nbsp;(the&nbsp;default,&nbsp;or&nbsp;when<br>\n't'&nbsp;is&nbsp;appended&nbsp;to&nbsp;the&nbsp;mode&nbsp;argument),&nbsp;the&nbsp;contents&nbsp;of&nbsp;the&nbsp;file&nbsp;are<br>\nreturned&nbsp;as&nbsp;strings,&nbsp;the&nbsp;bytes&nbsp;having&nbsp;been&nbsp;first&nbsp;decoded&nbsp;using&nbsp;a<br>\nplatform-dependent&nbsp;encoding&nbsp;or&nbsp;using&nbsp;the&nbsp;specified&nbsp;encoding&nbsp;if&nbsp;given.<br>\n<br>\n'U'&nbsp;mode&nbsp;is&nbsp;deprecated&nbsp;and&nbsp;will&nbsp;raise&nbsp;an&nbsp;exception&nbsp;in&nbsp;future&nbsp;versions<br>\nof&nbsp;Python.&nbsp;&nbsp;It&nbsp;has&nbsp;no&nbsp;effect&nbsp;in&nbsp;Python&nbsp;3.&nbsp;&nbsp;Use&nbsp;newline&nbsp;to&nbsp;control<br>\nuniversal&nbsp;newlines&nbsp;mode.<br>\n<br>\nbuffering&nbsp;is&nbsp;an&nbsp;optional&nbsp;integer&nbsp;used&nbsp;to&nbsp;set&nbsp;the&nbsp;buffering&nbsp;policy.<br>\nPass&nbsp;0&nbsp;to&nbsp;switch&nbsp;buffering&nbsp;off&nbsp;(only&nbsp;allowed&nbsp;in&nbsp;binary&nbsp;mode),&nbsp;1&nbsp;to&nbsp;select<br>\nline&nbsp;buffering&nbsp;(only&nbsp;usable&nbsp;in&nbsp;text&nbsp;mode),&nbsp;and&nbsp;an&nbsp;integer&nbsp;&gt;&nbsp;1&nbsp;to&nbsp;indicate<br>\nthe&nbsp;size&nbsp;of&nbsp;a&nbsp;fixed-size&nbsp;chunk&nbsp;buffer.&nbsp;&nbsp;When&nbsp;no&nbsp;buffering&nbsp;argument&nbsp;is<br>\ngiven,&nbsp;the&nbsp;default&nbsp;buffering&nbsp;policy&nbsp;works&nbsp;as&nbsp;follows:<br>\n<br>\n*&nbsp;Binary&nbsp;files&nbsp;are&nbsp;buffered&nbsp;in&nbsp;fixed-size&nbsp;chunks;&nbsp;the&nbsp;size&nbsp;of&nbsp;the&nbsp;buffer<br>\n&nbsp;&nbsp;is&nbsp;chosen&nbsp;using&nbsp;a&nbsp;heuristic&nbsp;trying&nbsp;to&nbsp;determine&nbsp;the&nbsp;underlying&nbsp;device's<br>\n&nbsp;&nbsp;&quot;block&nbsp;size&quot;&nbsp;and&nbsp;falling&nbsp;back&nbsp;on&nbsp;`io.DEFAULT_BUFFER_SIZE`.<br>\n&nbsp;&nbsp;On&nbsp;many&nbsp;systems,&nbsp;the&nbsp;buffer&nbsp;will&nbsp;typically&nbsp;be&nbsp;4096&nbsp;or&nbsp;8192&nbsp;bytes&nbsp;long.<br>\n<br>\n*&nbsp;&quot;Interactive&quot;&nbsp;text&nbsp;files&nbsp;(files&nbsp;for&nbsp;which&nbsp;isatty()&nbsp;returns&nbsp;True)<br>\n&nbsp;&nbsp;use&nbsp;line&nbsp;buffering.&nbsp;&nbsp;Other&nbsp;text&nbsp;files&nbsp;use&nbsp;the&nbsp;policy&nbsp;described&nbsp;above<br>\n&nbsp;&nbsp;for&nbsp;binary&nbsp;files.<br>\n<br>\nencoding&nbsp;is&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;encoding&nbsp;used&nbsp;to&nbsp;decode&nbsp;or&nbsp;encode&nbsp;the<br>\nfile.&nbsp;This&nbsp;should&nbsp;only&nbsp;be&nbsp;used&nbsp;in&nbsp;text&nbsp;mode.&nbsp;The&nbsp;default&nbsp;encoding&nbsp;is<br>\nplatform&nbsp;dependent,&nbsp;but&nbsp;any&nbsp;encoding&nbsp;supported&nbsp;by&nbsp;Python&nbsp;can&nbsp;be<br>\npassed.&nbsp;&nbsp;See&nbsp;the&nbsp;codecs&nbsp;module&nbsp;for&nbsp;the&nbsp;list&nbsp;of&nbsp;supported&nbsp;encodings.<br>\n<br>\nerrors&nbsp;is&nbsp;an&nbsp;optional&nbsp;string&nbsp;that&nbsp;specifies&nbsp;how&nbsp;encoding&nbsp;errors&nbsp;are&nbsp;to<br>\nbe&nbsp;handled---this&nbsp;argument&nbsp;should&nbsp;not&nbsp;be&nbsp;used&nbsp;in&nbsp;binary&nbsp;mode.&nbsp;Pass<br>\n'strict'&nbsp;to&nbsp;raise&nbsp;a&nbsp;ValueError&nbsp;exception&nbsp;if&nbsp;there&nbsp;is&nbsp;an&nbsp;encoding&nbsp;error<br>\n(the&nbsp;default&nbsp;of&nbsp;None&nbsp;has&nbsp;the&nbsp;same&nbsp;effect),&nbsp;or&nbsp;pass&nbsp;'ignore'&nbsp;to&nbsp;ignore<br>\nerrors.&nbsp;(Note&nbsp;that&nbsp;ignoring&nbsp;encoding&nbsp;errors&nbsp;can&nbsp;lead&nbsp;to&nbsp;data&nbsp;loss.)<br>\nSee&nbsp;the&nbsp;documentation&nbsp;for&nbsp;codecs.register&nbsp;or&nbsp;run&nbsp;'help(codecs.Codec)'<br>\nfor&nbsp;a&nbsp;list&nbsp;of&nbsp;the&nbsp;permitted&nbsp;encoding&nbsp;error&nbsp;strings.<br>\n<br>\nnewline&nbsp;controls&nbsp;how&nbsp;universal&nbsp;newlines&nbsp;works&nbsp;(it&nbsp;only&nbsp;applies&nbsp;to&nbsp;text<br>\nmode).&nbsp;It&nbsp;can&nbsp;be&nbsp;None,&nbsp;'',&nbsp;'&#92;n',&nbsp;'&#92;r',&nbsp;and&nbsp;'&#92;r&#92;n'.&nbsp;&nbsp;It&nbsp;works&nbsp;as<br>\nfollows:<br>\n<br>\n*&nbsp;On&nbsp;input,&nbsp;if&nbsp;newline&nbsp;is&nbsp;None,&nbsp;universal&nbsp;newlines&nbsp;mode&nbsp;is<br>\n&nbsp;&nbsp;enabled.&nbsp;Lines&nbsp;in&nbsp;the&nbsp;input&nbsp;can&nbsp;end&nbsp;in&nbsp;'&#92;n',&nbsp;'&#92;r',&nbsp;or&nbsp;'&#92;r&#92;n',&nbsp;and<br>\n&nbsp;&nbsp;these&nbsp;are&nbsp;translated&nbsp;into&nbsp;'&#92;n'&nbsp;before&nbsp;being&nbsp;returned&nbsp;to&nbsp;the<br>\n&nbsp;&nbsp;caller.&nbsp;If&nbsp;it&nbsp;is&nbsp;'',&nbsp;universal&nbsp;newline&nbsp;mode&nbsp;is&nbsp;enabled,&nbsp;but&nbsp;line<br>\n&nbsp;&nbsp;endings&nbsp;are&nbsp;returned&nbsp;to&nbsp;the&nbsp;caller&nbsp;untranslated.&nbsp;If&nbsp;it&nbsp;has&nbsp;any&nbsp;of<br>\n&nbsp;&nbsp;the&nbsp;other&nbsp;legal&nbsp;values,&nbsp;input&nbsp;lines&nbsp;are&nbsp;only&nbsp;terminated&nbsp;by&nbsp;the&nbsp;given<br>\n&nbsp;&nbsp;string,&nbsp;and&nbsp;the&nbsp;line&nbsp;ending&nbsp;is&nbsp;returned&nbsp;to&nbsp;the&nbsp;caller&nbsp;untranslated.<br>\n<br>\n*&nbsp;On&nbsp;output,&nbsp;if&nbsp;newline&nbsp;is&nbsp;None,&nbsp;any&nbsp;'&#92;n'&nbsp;characters&nbsp;written&nbsp;are<br>\n&nbsp;&nbsp;translated&nbsp;to&nbsp;the&nbsp;system&nbsp;default&nbsp;line&nbsp;separator,&nbsp;os.linesep.&nbsp;If<br>\n&nbsp;&nbsp;newline&nbsp;is&nbsp;''&nbsp;or&nbsp;'&#92;n',&nbsp;no&nbsp;translation&nbsp;takes&nbsp;place.&nbsp;If&nbsp;newline&nbsp;is&nbsp;any<br>\n&nbsp;&nbsp;of&nbsp;the&nbsp;other&nbsp;legal&nbsp;values,&nbsp;any&nbsp;'&#92;n'&nbsp;characters&nbsp;written&nbsp;are&nbsp;translated<br>\n&nbsp;&nbsp;to&nbsp;the&nbsp;given&nbsp;string.<br>\n<br>\nIf&nbsp;closefd&nbsp;is&nbsp;False,&nbsp;the&nbsp;underlying&nbsp;file&nbsp;descriptor&nbsp;will&nbsp;be&nbsp;kept&nbsp;open<br>\nwhen&nbsp;the&nbsp;file&nbsp;is&nbsp;closed.&nbsp;This&nbsp;does&nbsp;not&nbsp;work&nbsp;when&nbsp;a&nbsp;file&nbsp;name&nbsp;is&nbsp;given<br>\nand&nbsp;must&nbsp;be&nbsp;True&nbsp;in&nbsp;that&nbsp;case.<br>\n<br>\nA&nbsp;custom&nbsp;opener&nbsp;can&nbsp;be&nbsp;used&nbsp;by&nbsp;passing&nbsp;a&nbsp;callable&nbsp;as&nbsp;*opener*.&nbsp;The<br>\nunderlying&nbsp;file&nbsp;descriptor&nbsp;for&nbsp;the&nbsp;file&nbsp;object&nbsp;is&nbsp;then&nbsp;obtained&nbsp;by<br>\ncalling&nbsp;*opener*&nbsp;with&nbsp;(*file*,&nbsp;*flags*).&nbsp;*opener*&nbsp;must&nbsp;return&nbsp;an&nbsp;open<br>\nfile&nbsp;descriptor&nbsp;(passing&nbsp;os.open&nbsp;as&nbsp;*opener*&nbsp;results&nbsp;in&nbsp;functionality<br>\nsimilar&nbsp;to&nbsp;passing&nbsp;None).<br>\n<br>\nopen()&nbsp;returns&nbsp;a&nbsp;file&nbsp;object&nbsp;whose&nbsp;type&nbsp;depends&nbsp;on&nbsp;the&nbsp;mode,&nbsp;and<br>\nthrough&nbsp;which&nbsp;the&nbsp;standard&nbsp;file&nbsp;operations&nbsp;such&nbsp;as&nbsp;reading&nbsp;and&nbsp;writing<br>\nare&nbsp;performed.&nbsp;When&nbsp;open()&nbsp;is&nbsp;used&nbsp;to&nbsp;open&nbsp;a&nbsp;file&nbsp;in&nbsp;a&nbsp;text&nbsp;mode&nbsp;('w',<br>\n'r',&nbsp;'wt',&nbsp;'rt',&nbsp;etc.),&nbsp;it&nbsp;returns&nbsp;a&nbsp;TextIOWrapper.&nbsp;When&nbsp;used&nbsp;to&nbsp;open<br>\na&nbsp;file&nbsp;in&nbsp;a&nbsp;binary&nbsp;mode,&nbsp;the&nbsp;returned&nbsp;class&nbsp;varies:&nbsp;in&nbsp;read&nbsp;binary<br>\nmode,&nbsp;it&nbsp;returns&nbsp;a&nbsp;BufferedReader;&nbsp;in&nbsp;write&nbsp;binary&nbsp;and&nbsp;append&nbsp;binary<br>\nmodes,&nbsp;it&nbsp;returns&nbsp;a&nbsp;BufferedWriter,&nbsp;and&nbsp;in&nbsp;read/write&nbsp;mode,&nbsp;it&nbsp;returns<br>\na&nbsp;BufferedRandom.<br>\n<br>\nIt&nbsp;is&nbsp;also&nbsp;possible&nbsp;to&nbsp;use&nbsp;a&nbsp;string&nbsp;or&nbsp;bytearray&nbsp;as&nbsp;a&nbsp;file&nbsp;for&nbsp;both<br>\nreading&nbsp;and&nbsp;writing.&nbsp;For&nbsp;strings&nbsp;StringIO&nbsp;can&nbsp;be&nbsp;used&nbsp;like&nbsp;a&nbsp;file<br>\nopened&nbsp;in&nbsp;a&nbsp;text&nbsp;mode,&nbsp;and&nbsp;for&nbsp;bytes&nbsp;a&nbsp;BytesIO&nbsp;can&nbsp;be&nbsp;used&nbsp;like&nbsp;a&nbsp;file<br>\nopened&nbsp;in&nbsp;a&nbsp;binary&nbsp;mode.",
    "ord": "ord(c)<br>\n<br>\nReturn&nbsp;the&nbsp;Unicode&nbsp;code&nbsp;point&nbsp;for&nbsp;a&nbsp;one-character&nbsp;string.",
    "pow": "pow(x,&nbsp;y,&nbsp;z=None)<br>\n<br>\nEquivalent&nbsp;to&nbsp;x**y&nbsp;(with&nbsp;two&nbsp;arguments)&nbsp;or&nbsp;x**y&nbsp;%&nbsp;z&nbsp;(with&nbsp;three&nbsp;arguments)<br>\n<br>\nSome&nbsp;types,&nbsp;such&nbsp;as&nbsp;ints,&nbsp;are&nbsp;able&nbsp;to&nbsp;use&nbsp;a&nbsp;more&nbsp;efficient&nbsp;algorithm&nbsp;when<br>\ninvoked&nbsp;using&nbsp;the&nbsp;three&nbsp;argument&nbsp;form.",
    "print": "print(value,&nbsp;...,&nbsp;sep='&nbsp;',&nbsp;end='&#92;n',&nbsp;file=sys.stdout,&nbsp;flush=False)<br>\n<br>\nPrints&nbsp;the&nbsp;values&nbsp;to&nbsp;a&nbsp;stream,&nbsp;or&nbsp;to&nbsp;sys.stdout&nbsp;by&nbsp;default.<br>\nOptional&nbsp;keyword&nbsp;arguments:<br>\nfile:&nbsp;&nbsp;a&nbsp;file-like&nbsp;object&nbsp;(stream);&nbsp;defaults&nbsp;to&nbsp;the&nbsp;current&nbsp;sys.stdout.<br>\nsep:&nbsp;&nbsp;&nbsp;string&nbsp;inserted&nbsp;between&nbsp;values,&nbsp;default&nbsp;a&nbsp;space.<br>\nend:&nbsp;&nbsp;&nbsp;string&nbsp;appended&nbsp;after&nbsp;the&nbsp;last&nbsp;value,&nbsp;default&nbsp;a&nbsp;newline.<br>\nflush:&nbsp;whether&nbsp;to&nbsp;forcibly&nbsp;flush&nbsp;the&nbsp;stream.",
    "property": "property(fget=None,&nbsp;fset=None,&nbsp;fdel=None,&nbsp;doc=None)<br>\n<br>\nProperty&nbsp;attribute.<br>\n<br>\n&nbsp;&nbsp;fget<br>\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;getting&nbsp;an&nbsp;attribute&nbsp;value<br>\n&nbsp;&nbsp;fset<br>\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;setting&nbsp;an&nbsp;attribute&nbsp;value<br>\n&nbsp;&nbsp;fdel<br>\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;del'ing&nbsp;an&nbsp;attribute<br>\n&nbsp;&nbsp;doc<br>\n&nbsp;&nbsp;&nbsp;&nbsp;docstring<br>\n<br>\nTypical&nbsp;use&nbsp;is&nbsp;to&nbsp;define&nbsp;a&nbsp;managed&nbsp;attribute&nbsp;x:<br>\n<br>\nclass&nbsp;C(object):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;getx(self):&nbsp;return&nbsp;self._x<br>\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;setx(self,&nbsp;value):&nbsp;self._x&nbsp;=&nbsp;value<br>\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;delx(self):&nbsp;del&nbsp;self._x<br>\n&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;property(getx,&nbsp;setx,&nbsp;delx,&nbsp;&quot;I'm&nbsp;the&nbsp;'x'&nbsp;property.&quot;)<br>\n<br>\nDecorators&nbsp;make&nbsp;defining&nbsp;new&nbsp;properties&nbsp;or&nbsp;modifying&nbsp;existing&nbsp;ones&nbsp;easy:<br>\n<br>\nclass&nbsp;C(object):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;@property<br>\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;x(self):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;I&nbsp;am&nbsp;the&nbsp;'x'&nbsp;property.&quot;<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;self._x<br>\n&nbsp;&nbsp;&nbsp;&nbsp;@x.setter<br>\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;x(self,&nbsp;value):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._x&nbsp;=&nbsp;value<br>\n&nbsp;&nbsp;&nbsp;&nbsp;@x.deleter<br>\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;x(self):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;del&nbsp;self._x",
    "range": "range(stop)&nbsp;-&gt;&nbsp;range&nbsp;object<br>\nrange(start,&nbsp;stop[,&nbsp;step])&nbsp;-&gt;&nbsp;range&nbsp;object<br>\n<br>\nReturn&nbsp;an&nbsp;object&nbsp;that&nbsp;produces&nbsp;a&nbsp;sequence&nbsp;of&nbsp;integers&nbsp;from&nbsp;start&nbsp;(inclusive)<br>\nto&nbsp;stop&nbsp;(exclusive)&nbsp;by&nbsp;step.&nbsp;&nbsp;range(i,&nbsp;j)&nbsp;produces&nbsp;i,&nbsp;i+1,&nbsp;i+2,&nbsp;...,&nbsp;j-1.<br>\nstart&nbsp;defaults&nbsp;to&nbsp;0,&nbsp;and&nbsp;stop&nbsp;is&nbsp;omitted!&nbsp;&nbsp;range(4)&nbsp;produces&nbsp;0,&nbsp;1,&nbsp;2,&nbsp;3.<br>\nThese&nbsp;are&nbsp;exactly&nbsp;the&nbsp;valid&nbsp;indices&nbsp;for&nbsp;a&nbsp;list&nbsp;of&nbsp;4&nbsp;elements.<br>\nWhen&nbsp;step&nbsp;is&nbsp;given,&nbsp;it&nbsp;specifies&nbsp;the&nbsp;increment&nbsp;(or&nbsp;decrement).",
    "repr": "repr(obj)<br>\n<br>\nReturn&nbsp;the&nbsp;canonical&nbsp;string&nbsp;representation&nbsp;of&nbsp;the&nbsp;object.<br>\n<br>\nFor&nbsp;many&nbsp;object&nbsp;types,&nbsp;including&nbsp;most&nbsp;builtins,&nbsp;eval(repr(obj))&nbsp;==&nbsp;obj.",
    "reversed": "reversed(sequence)<br>\n<br>\nReturn&nbsp;a&nbsp;reverse&nbsp;iterator&nbsp;over&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;given&nbsp;sequence.",
    "round": "round(number,&nbsp;ndigits=None)<br>\n<br>\nRound&nbsp;a&nbsp;number&nbsp;to&nbsp;a&nbsp;given&nbsp;precision&nbsp;in&nbsp;decimal&nbsp;digits.<br>\n<br>\nThe&nbsp;return&nbsp;value&nbsp;is&nbsp;an&nbsp;integer&nbsp;if&nbsp;ndigits&nbsp;is&nbsp;omitted&nbsp;or&nbsp;None.&nbsp;&nbsp;Otherwise<br>\nthe&nbsp;return&nbsp;value&nbsp;has&nbsp;the&nbsp;same&nbsp;type&nbsp;as&nbsp;the&nbsp;number.&nbsp;&nbsp;ndigits&nbsp;may&nbsp;be&nbsp;negative.",
    "set": "set()&nbsp;-&gt;&nbsp;new&nbsp;empty&nbsp;set&nbsp;object<br>\nset(iterable)&nbsp;-&gt;&nbsp;new&nbsp;set&nbsp;object<br>\n<br>\nBuild&nbsp;an&nbsp;unordered&nbsp;collection&nbsp;of&nbsp;unique&nbsp;elements.",
    "set.add": "Add&nbsp;an&nbsp;element&nbsp;to&nbsp;a&nbsp;set.<br>\n<br>\nThis&nbsp;has&nbsp;no&nbsp;effect&nbsp;if&nbsp;the&nbsp;element&nbsp;is&nbsp;already&nbsp;present.",
    "set.clear": "Remove&nbsp;all&nbsp;elements&nbsp;from&nbsp;this&nbsp;set.",
    "set.copy": "Return&nbsp;a&nbsp;shallow&nbsp;copy&nbsp;of&nbsp;a&nbsp;set.",
    "set.difference": "Return&nbsp;the&nbsp;difference&nbsp;of&nbsp;two&nbsp;or&nbsp;more&nbsp;sets&nbsp;as&nbsp;a&nbsp;new&nbsp;set.<br>\n<br>\n(i.e.&nbsp;all&nbsp;elements&nbsp;that&nbsp;are&nbsp;in&nbsp;this&nbsp;set&nbsp;but&nbsp;not&nbsp;the&nbsp;others.)",
    "set.difference_update": "Remove&nbsp;all&nbsp;elements&nbsp;of&nbsp;another&nbsp;set&nbsp;from&nbsp;this&nbsp;set.",
    "set.discard": "Remove&nbsp;an&nbsp;element&nbsp;from&nbsp;a&nbsp;set&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;member.<br>\n<br>\nIf&nbsp;the&nbsp;element&nbsp;is&nbsp;not&nbsp;a&nbsp;member,&nbsp;do&nbsp;nothing.",
    "set.intersection": "Return&nbsp;the&nbsp;intersection&nbsp;of&nbsp;two&nbsp;sets&nbsp;as&nbsp;a&nbsp;new&nbsp;set.<br>\n<br>\n(i.e.&nbsp;all&nbsp;elements&nbsp;that&nbsp;are&nbsp;in&nbsp;both&nbsp;sets.)",
    "set.intersection_update": "Update&nbsp;a&nbsp;set&nbsp;with&nbsp;the&nbsp;intersection&nbsp;of&nbsp;itself&nbsp;and&nbsp;another.",
    "set.isdisjoint": "Return&nbsp;True&nbsp;if&nbsp;two&nbsp;sets&nbsp;have&nbsp;a&nbsp;null&nbsp;intersection.",
    "set.issubset": "Report&nbsp;whether&nbsp;another&nbsp;set&nbsp;contains&nbsp;this&nbsp;set.",
    "set.issuperset": "Report&nbsp;whether&nbsp;this&nbsp;set&nbsp;contains&nbsp;another&nbsp;set.",
    "set.pop": "Remove&nbsp;and&nbsp;return&nbsp;an&nbsp;arbitrary&nbsp;set&nbsp;element.<br>\nRaises&nbsp;KeyError&nbsp;if&nbsp;the&nbsp;set&nbsp;is&nbsp;empty.",
    "set.remove": "Remove&nbsp;an&nbsp;element&nbsp;from&nbsp;a&nbsp;set;&nbsp;it&nbsp;must&nbsp;be&nbsp;a&nbsp;member.<br>\n<br>\nIf&nbsp;the&nbsp;element&nbsp;is&nbsp;not&nbsp;a&nbsp;member,&nbsp;raise&nbsp;a&nbsp;KeyError.",
    "set.symmetric_difference": "Return&nbsp;the&nbsp;symmetric&nbsp;difference&nbsp;of&nbsp;two&nbsp;sets&nbsp;as&nbsp;a&nbsp;new&nbsp;set.<br>\n<br>\n(i.e.&nbsp;all&nbsp;elements&nbsp;that&nbsp;are&nbsp;in&nbsp;exactly&nbsp;one&nbsp;of&nbsp;the&nbsp;sets.)",
    "set.symmetric_difference_update": "Update&nbsp;a&nbsp;set&nbsp;with&nbsp;the&nbsp;symmetric&nbsp;difference&nbsp;of&nbsp;itself&nbsp;and&nbsp;another.",
    "set.union": "Return&nbsp;the&nbsp;union&nbsp;of&nbsp;sets&nbsp;as&nbsp;a&nbsp;new&nbsp;set.<br>\n<br>\n(i.e.&nbsp;all&nbsp;elements&nbsp;that&nbsp;are&nbsp;in&nbsp;either&nbsp;set.)",
    "set.update": "Update&nbsp;a&nbsp;set&nbsp;with&nbsp;the&nbsp;union&nbsp;of&nbsp;itself&nbsp;and&nbsp;others.",
    "setattr": "setattr(obj,&nbsp;name,&nbsp;value)<br>\n<br>\nSets&nbsp;the&nbsp;named&nbsp;attribute&nbsp;on&nbsp;the&nbsp;given&nbsp;object&nbsp;to&nbsp;the&nbsp;specified&nbsp;value.<br>\n<br>\nsetattr(x,&nbsp;'y',&nbsp;v)&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;``x.y&nbsp;=&nbsp;v''",
    "slice": "slice(stop)<br>\nslice(start,&nbsp;stop[,&nbsp;step])<br>\n<br>\nCreate&nbsp;a&nbsp;slice&nbsp;object.&nbsp;&nbsp;This&nbsp;is&nbsp;used&nbsp;for&nbsp;extended&nbsp;slicing&nbsp;(e.g.&nbsp;a[0:10:2]).",
    "sorted": "sorted(iterable,&nbsp;/,&nbsp;*,&nbsp;key=None,&nbsp;reverse=False)<br>\n<br>\nReturn&nbsp;a&nbsp;new&nbsp;list&nbsp;containing&nbsp;all&nbsp;items&nbsp;from&nbsp;the&nbsp;iterable&nbsp;in&nbsp;ascending&nbsp;order.<br>\n<br>\nA&nbsp;custom&nbsp;key&nbsp;function&nbsp;can&nbsp;be&nbsp;supplied&nbsp;to&nbsp;customize&nbsp;the&nbsp;sort&nbsp;order,&nbsp;and&nbsp;the<br>\nreverse&nbsp;flag&nbsp;can&nbsp;be&nbsp;set&nbsp;to&nbsp;request&nbsp;the&nbsp;result&nbsp;in&nbsp;descending&nbsp;order.",
    "str": "str(object='')&nbsp;-&gt;&nbsp;str<br>\nstr(bytes_or_buffer[,&nbsp;encoding[,&nbsp;errors]])&nbsp;-&gt;&nbsp;str<br>\n<br>\nCreate&nbsp;a&nbsp;new&nbsp;string&nbsp;object&nbsp;from&nbsp;the&nbsp;given&nbsp;object.&nbsp;If&nbsp;encoding&nbsp;or<br>\nerrors&nbsp;is&nbsp;specified,&nbsp;then&nbsp;the&nbsp;object&nbsp;must&nbsp;expose&nbsp;a&nbsp;data&nbsp;buffer<br>\nthat&nbsp;will&nbsp;be&nbsp;decoded&nbsp;using&nbsp;the&nbsp;given&nbsp;encoding&nbsp;and&nbsp;error&nbsp;handler.<br>\nOtherwise,&nbsp;returns&nbsp;the&nbsp;result&nbsp;of&nbsp;object.__str__()&nbsp;(if&nbsp;defined)<br>\nor&nbsp;repr(object).<br>\nencoding&nbsp;defaults&nbsp;to&nbsp;sys.getdefaultencoding().<br>\nerrors&nbsp;defaults&nbsp;to&nbsp;'strict'.",
    "str.capitalize": "str.capitalize()<br>\n<br>\nReturn&nbsp;a&nbsp;capitalized&nbsp;version&nbsp;of&nbsp;the&nbsp;string.<br>\n<br>\nMore&nbsp;specifically,&nbsp;make&nbsp;the&nbsp;first&nbsp;character&nbsp;have&nbsp;upper&nbsp;case&nbsp;and&nbsp;the&nbsp;rest&nbsp;lower<br>\ncase.",
    "str.casefold": "str.casefold()<br>\n<br>\nReturn&nbsp;a&nbsp;version&nbsp;of&nbsp;the&nbsp;string&nbsp;suitable&nbsp;for&nbsp;caseless&nbsp;comparisons.",
    "str.center": "str.center(width,&nbsp;fillchar='&nbsp;')<br>\n<br>\nReturn&nbsp;a&nbsp;centered&nbsp;string&nbsp;of&nbsp;length&nbsp;width.<br>\n<br>\nPadding&nbsp;is&nbsp;done&nbsp;using&nbsp;the&nbsp;specified&nbsp;fill&nbsp;character&nbsp;(default&nbsp;is&nbsp;a&nbsp;space).",
    "str.count": "S.count(sub[,&nbsp;start[,&nbsp;end]])&nbsp;-&gt;&nbsp;int<br>\n<br>\nReturn&nbsp;the&nbsp;number&nbsp;of&nbsp;non-overlapping&nbsp;occurrences&nbsp;of&nbsp;substring&nbsp;sub&nbsp;in<br>\nstring&nbsp;S[start:end].&nbsp;&nbsp;Optional&nbsp;arguments&nbsp;start&nbsp;and&nbsp;end&nbsp;are<br>\ninterpreted&nbsp;as&nbsp;in&nbsp;slice&nbsp;notation.",
    "str.encode": "str.encode(encoding='utf-8',&nbsp;errors='strict')<br>\n<br>\nEncode&nbsp;the&nbsp;string&nbsp;using&nbsp;the&nbsp;codec&nbsp;registered&nbsp;for&nbsp;encoding.<br>\n<br>\n&nbsp;&nbsp;encoding<br>\n&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;encoding&nbsp;in&nbsp;which&nbsp;to&nbsp;encode&nbsp;the&nbsp;string.<br>\n&nbsp;&nbsp;errors<br>\n&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;error&nbsp;handling&nbsp;scheme&nbsp;to&nbsp;use&nbsp;for&nbsp;encoding&nbsp;errors.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;default&nbsp;is&nbsp;'strict'&nbsp;meaning&nbsp;that&nbsp;encoding&nbsp;errors&nbsp;raise&nbsp;a<br>\n&nbsp;&nbsp;&nbsp;&nbsp;UnicodeEncodeError.&nbsp;&nbsp;Other&nbsp;possible&nbsp;values&nbsp;are&nbsp;'ignore',&nbsp;'replace'&nbsp;and<br>\n&nbsp;&nbsp;&nbsp;&nbsp;'xmlcharrefreplace'&nbsp;as&nbsp;well&nbsp;as&nbsp;any&nbsp;other&nbsp;name&nbsp;registered&nbsp;with<br>\n&nbsp;&nbsp;&nbsp;&nbsp;codecs.register_error&nbsp;that&nbsp;can&nbsp;handle&nbsp;UnicodeEncodeErrors.",
    "str.endswith": "S.endswith(suffix[,&nbsp;start[,&nbsp;end]])&nbsp;-&gt;&nbsp;bool<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;S&nbsp;ends&nbsp;with&nbsp;the&nbsp;specified&nbsp;suffix,&nbsp;False&nbsp;otherwise.<br>\nWith&nbsp;optional&nbsp;start,&nbsp;test&nbsp;S&nbsp;beginning&nbsp;at&nbsp;that&nbsp;position.<br>\nWith&nbsp;optional&nbsp;end,&nbsp;stop&nbsp;comparing&nbsp;S&nbsp;at&nbsp;that&nbsp;position.<br>\nsuffix&nbsp;can&nbsp;also&nbsp;be&nbsp;a&nbsp;tuple&nbsp;of&nbsp;strings&nbsp;to&nbsp;try.",
    "str.expandtabs": "str.expandtabs(tabsize=8)<br>\n<br>\nReturn&nbsp;a&nbsp;copy&nbsp;where&nbsp;all&nbsp;tab&nbsp;characters&nbsp;are&nbsp;expanded&nbsp;using&nbsp;spaces.<br>\n<br>\nIf&nbsp;tabsize&nbsp;is&nbsp;not&nbsp;given,&nbsp;a&nbsp;tab&nbsp;size&nbsp;of&nbsp;8&nbsp;characters&nbsp;is&nbsp;assumed.",
    "str.find": "S.find(sub[,&nbsp;start[,&nbsp;end]])&nbsp;-&gt;&nbsp;int<br>\n<br>\nReturn&nbsp;the&nbsp;lowest&nbsp;index&nbsp;in&nbsp;S&nbsp;where&nbsp;substring&nbsp;sub&nbsp;is&nbsp;found,<br>\nsuch&nbsp;that&nbsp;sub&nbsp;is&nbsp;contained&nbsp;within&nbsp;S[start:end].&nbsp;&nbsp;Optional<br>\narguments&nbsp;start&nbsp;and&nbsp;end&nbsp;are&nbsp;interpreted&nbsp;as&nbsp;in&nbsp;slice&nbsp;notation.<br>\n<br>\nReturn&nbsp;-1&nbsp;on&nbsp;failure.",
    "str.format": "S.format(*args,&nbsp;**kwargs)&nbsp;-&gt;&nbsp;str<br>\n<br>\nReturn&nbsp;a&nbsp;formatted&nbsp;version&nbsp;of&nbsp;S,&nbsp;using&nbsp;substitutions&nbsp;from&nbsp;args&nbsp;and&nbsp;kwargs.<br>\nThe&nbsp;substitutions&nbsp;are&nbsp;identified&nbsp;by&nbsp;braces&nbsp;('{'&nbsp;and&nbsp;'}').",
    "str.format_map": "S.format_map(mapping)&nbsp;-&gt;&nbsp;str<br>\n<br>\nReturn&nbsp;a&nbsp;formatted&nbsp;version&nbsp;of&nbsp;S,&nbsp;using&nbsp;substitutions&nbsp;from&nbsp;mapping.<br>\nThe&nbsp;substitutions&nbsp;are&nbsp;identified&nbsp;by&nbsp;braces&nbsp;('{'&nbsp;and&nbsp;'}').",
    "str.index": "S.index(sub[,&nbsp;start[,&nbsp;end]])&nbsp;-&gt;&nbsp;int<br>\n<br>\nReturn&nbsp;the&nbsp;lowest&nbsp;index&nbsp;in&nbsp;S&nbsp;where&nbsp;substring&nbsp;sub&nbsp;is&nbsp;found,&nbsp;<br>\nsuch&nbsp;that&nbsp;sub&nbsp;is&nbsp;contained&nbsp;within&nbsp;S[start:end].&nbsp;&nbsp;Optional<br>\narguments&nbsp;start&nbsp;and&nbsp;end&nbsp;are&nbsp;interpreted&nbsp;as&nbsp;in&nbsp;slice&nbsp;notation.<br>\n<br>\nRaises&nbsp;ValueError&nbsp;when&nbsp;the&nbsp;substring&nbsp;is&nbsp;not&nbsp;found.",
    "str.isalnum": "str.isalnum()<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;the&nbsp;string&nbsp;is&nbsp;an&nbsp;alpha-numeric&nbsp;string,&nbsp;False&nbsp;otherwise.<br>\n<br>\nA&nbsp;string&nbsp;is&nbsp;alpha-numeric&nbsp;if&nbsp;all&nbsp;characters&nbsp;in&nbsp;the&nbsp;string&nbsp;are&nbsp;alpha-numeric&nbsp;and<br>\nthere&nbsp;is&nbsp;at&nbsp;least&nbsp;one&nbsp;character&nbsp;in&nbsp;the&nbsp;string.",
    "str.isalpha": "str.isalpha()<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;the&nbsp;string&nbsp;is&nbsp;an&nbsp;alphabetic&nbsp;string,&nbsp;False&nbsp;otherwise.<br>\n<br>\nA&nbsp;string&nbsp;is&nbsp;alphabetic&nbsp;if&nbsp;all&nbsp;characters&nbsp;in&nbsp;the&nbsp;string&nbsp;are&nbsp;alphabetic&nbsp;and&nbsp;there<br>\nis&nbsp;at&nbsp;least&nbsp;one&nbsp;character&nbsp;in&nbsp;the&nbsp;string.",
    "str.isascii": "str.isascii()<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;all&nbsp;characters&nbsp;in&nbsp;the&nbsp;string&nbsp;are&nbsp;ASCII,&nbsp;False&nbsp;otherwise.<br>\n<br>\nASCII&nbsp;characters&nbsp;have&nbsp;code&nbsp;points&nbsp;in&nbsp;the&nbsp;range&nbsp;U+0000-U+007F.<br>\nEmpty&nbsp;string&nbsp;is&nbsp;ASCII&nbsp;too.",
    "str.isdecimal": "str.isdecimal()<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;the&nbsp;string&nbsp;is&nbsp;a&nbsp;decimal&nbsp;string,&nbsp;False&nbsp;otherwise.<br>\n<br>\nA&nbsp;string&nbsp;is&nbsp;a&nbsp;decimal&nbsp;string&nbsp;if&nbsp;all&nbsp;characters&nbsp;in&nbsp;the&nbsp;string&nbsp;are&nbsp;decimal&nbsp;and<br>\nthere&nbsp;is&nbsp;at&nbsp;least&nbsp;one&nbsp;character&nbsp;in&nbsp;the&nbsp;string.",
    "str.isdigit": "str.isdigit()<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;the&nbsp;string&nbsp;is&nbsp;a&nbsp;digit&nbsp;string,&nbsp;False&nbsp;otherwise.<br>\n<br>\nA&nbsp;string&nbsp;is&nbsp;a&nbsp;digit&nbsp;string&nbsp;if&nbsp;all&nbsp;characters&nbsp;in&nbsp;the&nbsp;string&nbsp;are&nbsp;digits&nbsp;and&nbsp;there<br>\nis&nbsp;at&nbsp;least&nbsp;one&nbsp;character&nbsp;in&nbsp;the&nbsp;string.",
    "str.isidentifier": "str.isidentifier()<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;the&nbsp;string&nbsp;is&nbsp;a&nbsp;valid&nbsp;Python&nbsp;identifier,&nbsp;False&nbsp;otherwise.<br>\n<br>\nUse&nbsp;keyword.iskeyword()&nbsp;to&nbsp;test&nbsp;for&nbsp;reserved&nbsp;identifiers&nbsp;such&nbsp;as&nbsp;&quot;def&quot;&nbsp;and<br>\n&quot;class&quot;.",
    "str.islower": "str.islower()<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;the&nbsp;string&nbsp;is&nbsp;a&nbsp;lowercase&nbsp;string,&nbsp;False&nbsp;otherwise.<br>\n<br>\nA&nbsp;string&nbsp;is&nbsp;lowercase&nbsp;if&nbsp;all&nbsp;cased&nbsp;characters&nbsp;in&nbsp;the&nbsp;string&nbsp;are&nbsp;lowercase&nbsp;and<br>\nthere&nbsp;is&nbsp;at&nbsp;least&nbsp;one&nbsp;cased&nbsp;character&nbsp;in&nbsp;the&nbsp;string.",
    "str.isnumeric": "str.isnumeric()<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;the&nbsp;string&nbsp;is&nbsp;a&nbsp;numeric&nbsp;string,&nbsp;False&nbsp;otherwise.<br>\n<br>\nA&nbsp;string&nbsp;is&nbsp;numeric&nbsp;if&nbsp;all&nbsp;characters&nbsp;in&nbsp;the&nbsp;string&nbsp;are&nbsp;numeric&nbsp;and&nbsp;there&nbsp;is&nbsp;at<br>\nleast&nbsp;one&nbsp;character&nbsp;in&nbsp;the&nbsp;string.",
    "str.isprintable": "str.isprintable()<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;the&nbsp;string&nbsp;is&nbsp;printable,&nbsp;False&nbsp;otherwise.<br>\n<br>\nA&nbsp;string&nbsp;is&nbsp;printable&nbsp;if&nbsp;all&nbsp;of&nbsp;its&nbsp;characters&nbsp;are&nbsp;considered&nbsp;printable&nbsp;in<br>\nrepr()&nbsp;or&nbsp;if&nbsp;it&nbsp;is&nbsp;empty.",
    "str.isspace": "str.isspace()<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;the&nbsp;string&nbsp;is&nbsp;a&nbsp;whitespace&nbsp;string,&nbsp;False&nbsp;otherwise.<br>\n<br>\nA&nbsp;string&nbsp;is&nbsp;whitespace&nbsp;if&nbsp;all&nbsp;characters&nbsp;in&nbsp;the&nbsp;string&nbsp;are&nbsp;whitespace&nbsp;and&nbsp;there<br>\nis&nbsp;at&nbsp;least&nbsp;one&nbsp;character&nbsp;in&nbsp;the&nbsp;string.",
    "str.istitle": "str.istitle()<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;the&nbsp;string&nbsp;is&nbsp;a&nbsp;title-cased&nbsp;string,&nbsp;False&nbsp;otherwise.<br>\n<br>\nIn&nbsp;a&nbsp;title-cased&nbsp;string,&nbsp;upper-&nbsp;and&nbsp;title-case&nbsp;characters&nbsp;may&nbsp;only<br>\nfollow&nbsp;uncased&nbsp;characters&nbsp;and&nbsp;lowercase&nbsp;characters&nbsp;only&nbsp;cased&nbsp;ones.",
    "str.isupper": "str.isupper()<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;the&nbsp;string&nbsp;is&nbsp;an&nbsp;uppercase&nbsp;string,&nbsp;False&nbsp;otherwise.<br>\n<br>\nA&nbsp;string&nbsp;is&nbsp;uppercase&nbsp;if&nbsp;all&nbsp;cased&nbsp;characters&nbsp;in&nbsp;the&nbsp;string&nbsp;are&nbsp;uppercase&nbsp;and<br>\nthere&nbsp;is&nbsp;at&nbsp;least&nbsp;one&nbsp;cased&nbsp;character&nbsp;in&nbsp;the&nbsp;string.",
    "str.join": "str.join(iterable)<br>\n<br>\nConcatenate&nbsp;any&nbsp;number&nbsp;of&nbsp;strings.<br>\n<br>\nThe&nbsp;string&nbsp;whose&nbsp;method&nbsp;is&nbsp;called&nbsp;is&nbsp;inserted&nbsp;in&nbsp;between&nbsp;each&nbsp;given&nbsp;string.<br>\nThe&nbsp;result&nbsp;is&nbsp;returned&nbsp;as&nbsp;a&nbsp;new&nbsp;string.<br>\n<br>\nExample:&nbsp;'.'.join(['ab',&nbsp;'pq',&nbsp;'rs'])&nbsp;-&gt;&nbsp;'ab.pq.rs'",
    "str.ljust": "str.ljust(width,&nbsp;fillchar='&nbsp;')<br>\n<br>\nReturn&nbsp;a&nbsp;left-justified&nbsp;string&nbsp;of&nbsp;length&nbsp;width.<br>\n<br>\nPadding&nbsp;is&nbsp;done&nbsp;using&nbsp;the&nbsp;specified&nbsp;fill&nbsp;character&nbsp;(default&nbsp;is&nbsp;a&nbsp;space).",
    "str.lower": "str.lower()<br>\n<br>\nReturn&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;string&nbsp;converted&nbsp;to&nbsp;lowercase.",
    "str.lstrip": "str.lstrip(chars=None)<br>\n<br>\nReturn&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;string&nbsp;with&nbsp;leading&nbsp;whitespace&nbsp;removed.<br>\n<br>\nIf&nbsp;chars&nbsp;is&nbsp;given&nbsp;and&nbsp;not&nbsp;None,&nbsp;remove&nbsp;characters&nbsp;in&nbsp;chars&nbsp;instead.",
    "str.maketrans": "str.maketrans(x,&nbsp;y=None,&nbsp;z=None)<br>\n<br>\nReturn&nbsp;a&nbsp;translation&nbsp;table&nbsp;usable&nbsp;for&nbsp;str.translate().<br>\n<br>\nIf&nbsp;there&nbsp;is&nbsp;only&nbsp;one&nbsp;argument,&nbsp;it&nbsp;must&nbsp;be&nbsp;a&nbsp;dictionary&nbsp;mapping&nbsp;Unicode<br>\nordinals&nbsp;(integers)&nbsp;or&nbsp;characters&nbsp;to&nbsp;Unicode&nbsp;ordinals,&nbsp;strings&nbsp;or&nbsp;None.<br>\nCharacter&nbsp;keys&nbsp;will&nbsp;be&nbsp;then&nbsp;converted&nbsp;to&nbsp;ordinals.<br>\nIf&nbsp;there&nbsp;are&nbsp;two&nbsp;arguments,&nbsp;they&nbsp;must&nbsp;be&nbsp;strings&nbsp;of&nbsp;equal&nbsp;length,&nbsp;and<br>\nin&nbsp;the&nbsp;resulting&nbsp;dictionary,&nbsp;each&nbsp;character&nbsp;in&nbsp;x&nbsp;will&nbsp;be&nbsp;mapped&nbsp;to&nbsp;the<br>\ncharacter&nbsp;at&nbsp;the&nbsp;same&nbsp;position&nbsp;in&nbsp;y.&nbsp;If&nbsp;there&nbsp;is&nbsp;a&nbsp;third&nbsp;argument,&nbsp;it<br>\nmust&nbsp;be&nbsp;a&nbsp;string,&nbsp;whose&nbsp;characters&nbsp;will&nbsp;be&nbsp;mapped&nbsp;to&nbsp;None&nbsp;in&nbsp;the&nbsp;result.",
    "str.partition": "str.partition(sep)<br>\n<br>\nPartition&nbsp;the&nbsp;string&nbsp;into&nbsp;three&nbsp;parts&nbsp;using&nbsp;the&nbsp;given&nbsp;separator.<br>\n<br>\nThis&nbsp;will&nbsp;search&nbsp;for&nbsp;the&nbsp;separator&nbsp;in&nbsp;the&nbsp;string.&nbsp;&nbsp;If&nbsp;the&nbsp;separator&nbsp;is&nbsp;found,<br>\nreturns&nbsp;a&nbsp;3-tuple&nbsp;containing&nbsp;the&nbsp;part&nbsp;before&nbsp;the&nbsp;separator,&nbsp;the&nbsp;separator<br>\nitself,&nbsp;and&nbsp;the&nbsp;part&nbsp;after&nbsp;it.<br>\n<br>\nIf&nbsp;the&nbsp;separator&nbsp;is&nbsp;not&nbsp;found,&nbsp;returns&nbsp;a&nbsp;3-tuple&nbsp;containing&nbsp;the&nbsp;original&nbsp;string<br>\nand&nbsp;two&nbsp;empty&nbsp;strings.",
    "str.replace": "str.replace(old,&nbsp;new,&nbsp;count=-1)<br>\n<br>\nReturn&nbsp;a&nbsp;copy&nbsp;with&nbsp;all&nbsp;occurrences&nbsp;of&nbsp;substring&nbsp;old&nbsp;replaced&nbsp;by&nbsp;new.<br>\n<br>\n&nbsp;&nbsp;count<br>\n&nbsp;&nbsp;&nbsp;&nbsp;Maximum&nbsp;number&nbsp;of&nbsp;occurrences&nbsp;to&nbsp;replace.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;(the&nbsp;default&nbsp;value)&nbsp;means&nbsp;replace&nbsp;all&nbsp;occurrences.<br>\n<br>\nIf&nbsp;the&nbsp;optional&nbsp;argument&nbsp;count&nbsp;is&nbsp;given,&nbsp;only&nbsp;the&nbsp;first&nbsp;count&nbsp;occurrences&nbsp;are<br>\nreplaced.",
    "str.rfind": "S.rfind(sub[,&nbsp;start[,&nbsp;end]])&nbsp;-&gt;&nbsp;int<br>\n<br>\nReturn&nbsp;the&nbsp;highest&nbsp;index&nbsp;in&nbsp;S&nbsp;where&nbsp;substring&nbsp;sub&nbsp;is&nbsp;found,<br>\nsuch&nbsp;that&nbsp;sub&nbsp;is&nbsp;contained&nbsp;within&nbsp;S[start:end].&nbsp;&nbsp;Optional<br>\narguments&nbsp;start&nbsp;and&nbsp;end&nbsp;are&nbsp;interpreted&nbsp;as&nbsp;in&nbsp;slice&nbsp;notation.<br>\n<br>\nReturn&nbsp;-1&nbsp;on&nbsp;failure.",
    "str.rindex": "S.rindex(sub[,&nbsp;start[,&nbsp;end]])&nbsp;-&gt;&nbsp;int<br>\n<br>\nReturn&nbsp;the&nbsp;highest&nbsp;index&nbsp;in&nbsp;S&nbsp;where&nbsp;substring&nbsp;sub&nbsp;is&nbsp;found,<br>\nsuch&nbsp;that&nbsp;sub&nbsp;is&nbsp;contained&nbsp;within&nbsp;S[start:end].&nbsp;&nbsp;Optional<br>\narguments&nbsp;start&nbsp;and&nbsp;end&nbsp;are&nbsp;interpreted&nbsp;as&nbsp;in&nbsp;slice&nbsp;notation.<br>\n<br>\nRaises&nbsp;ValueError&nbsp;when&nbsp;the&nbsp;substring&nbsp;is&nbsp;not&nbsp;found.",
    "str.rjust": "str.rjust(width,&nbsp;fillchar='&nbsp;')<br>\n<br>\nReturn&nbsp;a&nbsp;right-justified&nbsp;string&nbsp;of&nbsp;length&nbsp;width.<br>\n<br>\nPadding&nbsp;is&nbsp;done&nbsp;using&nbsp;the&nbsp;specified&nbsp;fill&nbsp;character&nbsp;(default&nbsp;is&nbsp;a&nbsp;space).",
    "str.rpartition": "str.rpartition(sep)<br>\n<br>\nPartition&nbsp;the&nbsp;string&nbsp;into&nbsp;three&nbsp;parts&nbsp;using&nbsp;the&nbsp;given&nbsp;separator.<br>\n<br>\nThis&nbsp;will&nbsp;search&nbsp;for&nbsp;the&nbsp;separator&nbsp;in&nbsp;the&nbsp;string,&nbsp;starting&nbsp;at&nbsp;the&nbsp;end.&nbsp;If<br>\nthe&nbsp;separator&nbsp;is&nbsp;found,&nbsp;returns&nbsp;a&nbsp;3-tuple&nbsp;containing&nbsp;the&nbsp;part&nbsp;before&nbsp;the<br>\nseparator,&nbsp;the&nbsp;separator&nbsp;itself,&nbsp;and&nbsp;the&nbsp;part&nbsp;after&nbsp;it.<br>\n<br>\nIf&nbsp;the&nbsp;separator&nbsp;is&nbsp;not&nbsp;found,&nbsp;returns&nbsp;a&nbsp;3-tuple&nbsp;containing&nbsp;two&nbsp;empty&nbsp;strings<br>\nand&nbsp;the&nbsp;original&nbsp;string.",
    "str.rsplit": "str.rsplit(sep=None,&nbsp;maxsplit=-1)<br>\n<br>\nReturn&nbsp;a&nbsp;list&nbsp;of&nbsp;the&nbsp;words&nbsp;in&nbsp;the&nbsp;string,&nbsp;using&nbsp;sep&nbsp;as&nbsp;the&nbsp;delimiter&nbsp;string.<br>\n<br>\n&nbsp;&nbsp;sep<br>\n&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;delimiter&nbsp;according&nbsp;which&nbsp;to&nbsp;split&nbsp;the&nbsp;string.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;None&nbsp;(the&nbsp;default&nbsp;value)&nbsp;means&nbsp;split&nbsp;according&nbsp;to&nbsp;any&nbsp;whitespace,<br>\n&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;discard&nbsp;empty&nbsp;strings&nbsp;from&nbsp;the&nbsp;result.<br>\n&nbsp;&nbsp;maxsplit<br>\n&nbsp;&nbsp;&nbsp;&nbsp;Maximum&nbsp;number&nbsp;of&nbsp;splits&nbsp;to&nbsp;do.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;(the&nbsp;default&nbsp;value)&nbsp;means&nbsp;no&nbsp;limit.<br>\n<br>\nSplits&nbsp;are&nbsp;done&nbsp;starting&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;string&nbsp;and&nbsp;working&nbsp;to&nbsp;the&nbsp;front.",
    "str.rstrip": "str.rstrip(chars=None)<br>\n<br>\nReturn&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;string&nbsp;with&nbsp;trailing&nbsp;whitespace&nbsp;removed.<br>\n<br>\nIf&nbsp;chars&nbsp;is&nbsp;given&nbsp;and&nbsp;not&nbsp;None,&nbsp;remove&nbsp;characters&nbsp;in&nbsp;chars&nbsp;instead.",
    "str.split": "str.split(sep=None,&nbsp;maxsplit=-1)<br>\n<br>\nReturn&nbsp;a&nbsp;list&nbsp;of&nbsp;the&nbsp;words&nbsp;in&nbsp;the&nbsp;string,&nbsp;using&nbsp;sep&nbsp;as&nbsp;the&nbsp;delimiter&nbsp;string.<br>\n<br>\n&nbsp;&nbsp;sep<br>\n&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;delimiter&nbsp;according&nbsp;which&nbsp;to&nbsp;split&nbsp;the&nbsp;string.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;None&nbsp;(the&nbsp;default&nbsp;value)&nbsp;means&nbsp;split&nbsp;according&nbsp;to&nbsp;any&nbsp;whitespace,<br>\n&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;discard&nbsp;empty&nbsp;strings&nbsp;from&nbsp;the&nbsp;result.<br>\n&nbsp;&nbsp;maxsplit<br>\n&nbsp;&nbsp;&nbsp;&nbsp;Maximum&nbsp;number&nbsp;of&nbsp;splits&nbsp;to&nbsp;do.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;(the&nbsp;default&nbsp;value)&nbsp;means&nbsp;no&nbsp;limit.",
    "str.splitlines": "str.splitlines(keepends=False)<br>\n<br>\nReturn&nbsp;a&nbsp;list&nbsp;of&nbsp;the&nbsp;lines&nbsp;in&nbsp;the&nbsp;string,&nbsp;breaking&nbsp;at&nbsp;line&nbsp;boundaries.<br>\n<br>\nLine&nbsp;breaks&nbsp;are&nbsp;not&nbsp;included&nbsp;in&nbsp;the&nbsp;resulting&nbsp;list&nbsp;unless&nbsp;keepends&nbsp;is&nbsp;given&nbsp;and<br>\ntrue.",
    "str.startswith": "S.startswith(prefix[,&nbsp;start[,&nbsp;end]])&nbsp;-&gt;&nbsp;bool<br>\n<br>\nReturn&nbsp;True&nbsp;if&nbsp;S&nbsp;starts&nbsp;with&nbsp;the&nbsp;specified&nbsp;prefix,&nbsp;False&nbsp;otherwise.<br>\nWith&nbsp;optional&nbsp;start,&nbsp;test&nbsp;S&nbsp;beginning&nbsp;at&nbsp;that&nbsp;position.<br>\nWith&nbsp;optional&nbsp;end,&nbsp;stop&nbsp;comparing&nbsp;S&nbsp;at&nbsp;that&nbsp;position.<br>\nprefix&nbsp;can&nbsp;also&nbsp;be&nbsp;a&nbsp;tuple&nbsp;of&nbsp;strings&nbsp;to&nbsp;try.",
    "str.strip": "str.strip(chars=None)<br>\n<br>\nReturn&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;string&nbsp;with&nbsp;leading&nbsp;and&nbsp;trailing&nbsp;whitespace&nbsp;remove.<br>\n<br>\nIf&nbsp;chars&nbsp;is&nbsp;given&nbsp;and&nbsp;not&nbsp;None,&nbsp;remove&nbsp;characters&nbsp;in&nbsp;chars&nbsp;instead.",
    "str.swapcase": "str.swapcase()<br>\n<br>\nConvert&nbsp;uppercase&nbsp;characters&nbsp;to&nbsp;lowercase&nbsp;and&nbsp;lowercase&nbsp;characters&nbsp;to&nbsp;uppercase.",
    "str.title": "str.title()<br>\n<br>\nReturn&nbsp;a&nbsp;version&nbsp;of&nbsp;the&nbsp;string&nbsp;where&nbsp;each&nbsp;word&nbsp;is&nbsp;titlecased.<br>\n<br>\nMore&nbsp;specifically,&nbsp;words&nbsp;start&nbsp;with&nbsp;uppercased&nbsp;characters&nbsp;and&nbsp;all&nbsp;remaining<br>\ncased&nbsp;characters&nbsp;have&nbsp;lower&nbsp;case.",
    "str.translate": "str.translate(table)<br>\n<br>\nReplace&nbsp;each&nbsp;character&nbsp;in&nbsp;the&nbsp;string&nbsp;using&nbsp;the&nbsp;given&nbsp;translation&nbsp;table.<br>\n<br>\n&nbsp;&nbsp;table<br>\n&nbsp;&nbsp;&nbsp;&nbsp;Translation&nbsp;table,&nbsp;which&nbsp;must&nbsp;be&nbsp;a&nbsp;mapping&nbsp;of&nbsp;Unicode&nbsp;ordinals&nbsp;to<br>\n&nbsp;&nbsp;&nbsp;&nbsp;Unicode&nbsp;ordinals,&nbsp;strings,&nbsp;or&nbsp;None.<br>\n<br>\nThe&nbsp;table&nbsp;must&nbsp;implement&nbsp;lookup/indexing&nbsp;via&nbsp;__getitem__,&nbsp;for&nbsp;instance&nbsp;a<br>\ndictionary&nbsp;or&nbsp;list.&nbsp;&nbsp;If&nbsp;this&nbsp;operation&nbsp;raises&nbsp;LookupError,&nbsp;the&nbsp;character&nbsp;is<br>\nleft&nbsp;untouched.&nbsp;&nbsp;Characters&nbsp;mapped&nbsp;to&nbsp;None&nbsp;are&nbsp;deleted.",
    "str.upper": "str.upper()<br>\n<br>\nReturn&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;string&nbsp;converted&nbsp;to&nbsp;uppercase.",
    "str.zfill": "str.zfill(width)<br>\n<br>\nPad&nbsp;a&nbsp;numeric&nbsp;string&nbsp;with&nbsp;zeros&nbsp;on&nbsp;the&nbsp;left,&nbsp;to&nbsp;fill&nbsp;a&nbsp;field&nbsp;of&nbsp;the&nbsp;given&nbsp;width.<br>\n<br>\nThe&nbsp;string&nbsp;is&nbsp;never&nbsp;truncated.",
    "string.capwords": "capwords(s&nbsp;[,sep])&nbsp;-&gt;&nbsp;string<br>\n<br>\n&nbsp;&nbsp;&nbsp;&nbsp;Split&nbsp;the&nbsp;argument&nbsp;into&nbsp;words&nbsp;using&nbsp;split,&nbsp;capitalize&nbsp;each<br>\n&nbsp;&nbsp;&nbsp;&nbsp;word&nbsp;using&nbsp;capitalize,&nbsp;and&nbsp;join&nbsp;the&nbsp;capitalized&nbsp;words&nbsp;using<br>\n&nbsp;&nbsp;&nbsp;&nbsp;join.&nbsp;&nbsp;If&nbsp;the&nbsp;optional&nbsp;second&nbsp;argument&nbsp;sep&nbsp;is&nbsp;absent&nbsp;or&nbsp;None,<br>\n&nbsp;&nbsp;&nbsp;&nbsp;runs&nbsp;of&nbsp;whitespace&nbsp;characters&nbsp;are&nbsp;replaced&nbsp;by&nbsp;a&nbsp;single&nbsp;space<br>\n&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;leading&nbsp;and&nbsp;trailing&nbsp;whitespace&nbsp;are&nbsp;removed,&nbsp;otherwise<br>\n&nbsp;&nbsp;&nbsp;&nbsp;sep&nbsp;is&nbsp;used&nbsp;to&nbsp;split&nbsp;and&nbsp;join&nbsp;the&nbsp;words.<br>\n<br>\n&nbsp;&nbsp;&nbsp;&nbsp;",
    "sum": "sum(iterable,&nbsp;start=0)<br>\n<br>\nReturn&nbsp;the&nbsp;sum&nbsp;of&nbsp;a&nbsp;'start'&nbsp;value&nbsp;(default:&nbsp;0)&nbsp;plus&nbsp;an&nbsp;iterable&nbsp;of&nbsp;numbers<br>\n<br>\nWhen&nbsp;the&nbsp;iterable&nbsp;is&nbsp;empty,&nbsp;return&nbsp;the&nbsp;start&nbsp;value.<br>\nThis&nbsp;function&nbsp;is&nbsp;intended&nbsp;specifically&nbsp;for&nbsp;use&nbsp;with&nbsp;numeric&nbsp;values&nbsp;and&nbsp;may<br>\nreject&nbsp;non-numeric&nbsp;types.",
    "super": "super()&nbsp;-&gt;&nbsp;same&nbsp;as&nbsp;super(__class__,&nbsp;&lt;first&nbsp;argument&gt;)<br>\nsuper(type)&nbsp;-&gt;&nbsp;unbound&nbsp;super&nbsp;object<br>\nsuper(type,&nbsp;obj)&nbsp;-&gt;&nbsp;bound&nbsp;super&nbsp;object;&nbsp;requires&nbsp;isinstance(obj,&nbsp;type)<br>\nsuper(type,&nbsp;type2)&nbsp;-&gt;&nbsp;bound&nbsp;super&nbsp;object;&nbsp;requires&nbsp;issubclass(type2,&nbsp;type)<br>\nTypical&nbsp;use&nbsp;to&nbsp;call&nbsp;a&nbsp;cooperative&nbsp;superclass&nbsp;method:<br>\nclass&nbsp;C(B):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;meth(self,&nbsp;arg):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super().meth(arg)<br>\nThis&nbsp;works&nbsp;for&nbsp;class&nbsp;methods&nbsp;too:<br>\nclass&nbsp;C(B):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;@classmethod<br>\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;cmeth(cls,&nbsp;arg):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super().cmeth(arg)<br>\n",
    "tuple": "tuple(iterable=())<br>\n<br>\nBuilt-in&nbsp;immutable&nbsp;sequence.<br>\n<br>\nIf&nbsp;no&nbsp;argument&nbsp;is&nbsp;given,&nbsp;the&nbsp;constructor&nbsp;returns&nbsp;an&nbsp;empty&nbsp;tuple.<br>\nIf&nbsp;iterable&nbsp;is&nbsp;specified&nbsp;the&nbsp;tuple&nbsp;is&nbsp;initialized&nbsp;from&nbsp;iterable's&nbsp;items.<br>\n<br>\nIf&nbsp;the&nbsp;argument&nbsp;is&nbsp;a&nbsp;tuple,&nbsp;the&nbsp;return&nbsp;value&nbsp;is&nbsp;the&nbsp;same&nbsp;object.",
    "type": "type(object_or_name,&nbsp;bases,&nbsp;dict)<br>\ntype(object)&nbsp;-&gt;&nbsp;the&nbsp;object's&nbsp;type<br>\ntype(name,&nbsp;bases,&nbsp;dict)&nbsp;-&gt;&nbsp;a&nbsp;new&nbsp;type",
    "vars": "vars([object])&nbsp;-&gt;&nbsp;dictionary<br>\n<br>\nWithout&nbsp;arguments,&nbsp;equivalent&nbsp;to&nbsp;locals().<br>\nWith&nbsp;an&nbsp;argument,&nbsp;equivalent&nbsp;to&nbsp;object.__dict__.",
    "zip": "zip(iter1&nbsp;[,iter2&nbsp;[...]])&nbsp;--&gt;&nbsp;zip&nbsp;object<br>\n<br>\nReturn&nbsp;a&nbsp;zip&nbsp;object&nbsp;whose&nbsp;.__next__()&nbsp;method&nbsp;returns&nbsp;a&nbsp;tuple&nbsp;where<br>\nthe&nbsp;i-th&nbsp;element&nbsp;comes&nbsp;from&nbsp;the&nbsp;i-th&nbsp;iterable&nbsp;argument.&nbsp;&nbsp;The&nbsp;.__next__()<br>\nmethod&nbsp;continues&nbsp;until&nbsp;the&nbsp;shortest&nbsp;iterable&nbsp;in&nbsp;the&nbsp;argument&nbsp;sequence<br>\nis&nbsp;exhausted&nbsp;and&nbsp;then&nbsp;it&nbsp;raises&nbsp;StopIteration."
};