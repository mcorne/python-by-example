var docstrings = {
    "abs": "Return the absolute value of the argument.",
    "all": "Return True if bool(x) is True for all values x in the iterable.<br>\n<br>\nIf the iterable is empty, return True.",
    "any": "Return True if bool(x) is True for any x in the iterable.<br>\n<br>\nIf the iterable is empty, return False.",
    "ascii": "Return an ASCII-only representation of an object.<br>\n<br>\nAs repr(), return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by repr() using &#92;&#92;x, &#92;&#92;u or &#92;&#92;U escapes. This generates a string similar to that returned by repr() in Python 2.",
    "bin": "Return the binary representation of an integer.<br>\n<br>\n &gt;&gt;&gt; bin(2796202) '0b1010101010101010101010'",
    "bool": "bool(x) -&gt; bool<br>\n<br>\nReturns True when the argument x is true, False otherwise.<br>\nThe builtins True and False are the only two instances of the class bool.<br>\nThe class bool is a subclass of the class int, and cannot be subclassed.",
    "bytearray": "bytearray(iterable_of_ints) -&gt; bytearray bytearray(string, encoding[, errors]) -&gt; bytearray bytearray(bytes_or_buffer) -&gt; mutable copy of bytes_or_buffer bytearray(int) -&gt; bytes array of size given by the parameter initialized with null bytes bytearray() -&gt; empty bytes array<br>\n<br>\nConstruct a mutable bytearray object from:<br>\n&#8226; - an iterable yielding integers in range(256) - a text string encoded using the specified encoding - a bytes or a buffer object - any object implementing the buffer API.<br>\n&#8226; - an integer",
    "dir": "dir([object]) -&gt; list of strings<br>\n<br>\nIf called without an argument, return the names in the current scope.<br>\nElse, return an alphabetized list of names comprising (some of) the attributes of the given object, and of attributes reachable from it.<br>\nIf the object supplies a method named __dir__, it will be used; otherwise the default dir() logic is used and returns:<br>\n&#8226; for a module object: the module's attributes.<br>\n&#8226; for a class object: its attributes, and recursively the attributes of its bases.<br>\n&#8226; for any other object: its attributes, its class's attributes, and recursively the attributes of its class's base classes.",
    "print": "print(value, ..., sep=' ', end='&#92;n', file=sys.stdout, flush=False)<br>\n<br>\nPrints the values to a stream, or to sys.stdout by default.<br>\nOptional keyword arguments:<br>\nfile: a file-like object (stream); defaults to the current sys.stdout.<br>\nsep: string inserted between values, default a space.<br>\nend: string appended after the last value, default a newline.<br>\nflush: whether to forcibly flush the stream.",
    "str.capitalize": "Return a capitalized version of the string.<br>\n<br>\nMore specifically, make the first character have upper case and the rest lower case."
};